;;; Iterator processing library.
;
; Mocks the design of python itertools module.

(
  (defun cypher.itertools.chain-two (iterable_a iterable_b)
    ;; Flatten two iterables.
    ;
    ; Args:
    ;   iterable_a: List.
    ;   iterable_b: Another list.
    ;
    ; Returns:
    ;   The flattend list.

    (if iterable_a
      (c
        (f iterable_a)
        (cypher.itertools.chain-two
          (r iterable_a)
          iterable_b
        )
      )
      iterable_b
    )
  )

  (defun cypher.itertools.chain iterables
    ;; Flatten multiple iterables.
    ;
    ; Args:
    ;   iterables: List of list to flatten.
    ;
    ; Returns:
    ;   The flattend list.

    (if iterables
      (cypher.itertools.chain-two
        (f iterables)
        (cypher.itertools.chain . (r iterables))
      )
      cypher.constants.NIL
    )
  )

  (defmacro @cypher.itertools.chain iterables
    (if iterables
      (qq (cypher.itertools.chain-two
        (unquote (f iterables))
        (unquote (c @cypher.itertools.chain (r iterables)))
      ))
      cypher.constants.NIL
    )
  )

  (defun cypher.itertools.map (func args)
    ;; Apply map function to each element.
    ;
    ; Args:
    ;   func: Function symbol name.
    ;   args: List of arguments to apply func on.
    ;
    ; Returns:
    ;   A list of mapped results from func.

    (if args
      (c
        (func (f args))
        (cypher.itertools.map func (r args))
      )
      cypher.constants.NIL
    )
  )

  (defun cypher.itertools.reduce (func args agg_init global_args)
    ;; Apply reduce function to each element sequentially.
    ;
    ; Args:
    ;   func: Function symbol name.
    ;   args: List of arguments to apply func on.
    ;   agg_init: Initial value.
    ;   global_args: Global arguments.
    ;
    ; Returns:
    ;   A reduced value.

    (if args
      (func
        (f args)
        (cypher.itertools.reduce func (r args) agg_init global_args)
        global_args
      )
      agg_init
    )
  )

  ;; Exports

  (defmacro cf.chain-two args (c cypher.itertools.chain-two args))
  (defmacro cf.chain args (c cypher.itertools.chain args))
  (defmacro @cf.chain args (c @cypher.itertools.chain args))
  (defmacro cf.map args (c cypher.itertools.map args))
  (defmacro cf.reduce args (c cypher.itertools.reduce args))
)
