;;; Iterator processing library.
;
; Mocks the design of python itertools module.
;
; TODO: add the following functions:
;  - compress
;  - zip
;  - filtermap

(
  ;; Dependencies:
  ;
  ; (include cypher/constants.clsp)
  ; (include cypher/math.clsp)
  ; (include cypher/utils.clsp)

  ;; Iterator to atom

  ; length

  (defun cypher.itertools.length (args)
    ;; Get the length of the list.
    ;
    ; Args:
    ;   args: The list to get the length of.
    ;
    ; Returns:
    ;   The length of the list.

    (if args
      (+ 1 (cypher.itertools.length (r args)))
      0
    )
  )

  ;; Atom to iterator

  ; range

  (defun --cypher.itertools.range (start end)
    (@cypher.utils.if
      (@cypher.math.ge start end) cypher.constants.NIL

      (c start (--cypher.itertools.range (+ start 1) end))
    )
  )
  (defun cypher.itertools.range (start end)
    ;; Get a range of numbers.
    ;
    ; Args:
    ;   start: The start of the range.
    ;   end: The end of the range.
    ;
    ; Returns:
    ;   The range of numbers.

    (@cypher.utils.if
      (any (@cypher.math.lt start 0) (@cypher.math.lt end 0))
      (x "Negative indices not supported.")

      (--cypher.itertools.range start end)
    )
  )

  ;; Iterator to iterator

  ; slice

  (defun --cypher.itertools.slice (args start end)
    (@cypher.utils.if
      (not args) cypher.constants.NIL

      (@cypher.math.eq end 0) cypher.constants.NIL

      (@cypher.math.gt start 0)
      (--cypher.itertools.slice
        (r args) (- start 1) (- end 1)
      )

      ; (@cypher.math.eq start 0)
      (c
        (f args)
        (--cypher.itertools.slice
          (r args) start (- end 1)
        )
      )
    )
  )
  (defun cypher.itertools.slice (args start end)
    ;; Slice the list.
    ;
    ; Args:
    ;   args: The list to slice.
    ;   start: The start index.
    ;   end: The end index.
    ;
    ; Returns:
    ;   The sliced list.

    (@cypher.utils.if
      (any (@cypher.math.lt start 0) (@cypher.math.lt end 0))
      (x "Negative indices not supported.")

      (@cypher.math.ge start end) cypher.constants.NIL

      (--cypher.itertools.slice args start end)
    )
  )

  ; reverse

  (defun --cypher.itertools.reverse.stager (args reversed_args)
    ;; Reverse the list, stager.
    ;
    ; Args:
    ;   args: The list to reverse.
    ;   reversed_args: The reversed list so far.
    ;
    ; Returns:
    ;   The reversed list.

    (if args
      (--cypher.itertools.reverse.stager
        (r args)
        (c (f args) reversed_args)
      )
      reversed_args
    )
  )
  (defun-inline cypher.itertools.reverse (args)
    ;; Reverse the list.
    ;
    ; Args:
    ;   args: The list to reverse.
    ;
    ; Returns:
    ;   The reversed list.

    (--cypher.itertools.reverse.stager
      args
      cypher.constants.NIL
    )
  )

  ; chain

  (defun --cypher.itertools.chain (args_a args_b)
    ;; Flatten two args.
    ;
    ; Args:
    ;   args_a: list
    ;   args_b: Another list.
    ;
    ; Returns:
    ;   The flattend list.

    (if args_a
      (c
        (f args_a)
        (--cypher.itertools.chain (r args_a) args_b)
      )
      args_b
    )
  )

  (defmacro @cypher.itertools.chain args
    ;; Flatten multiple args, macro form.
    ;
    ; Args:
    ;   args: list of list to flatten.
    ;
    ; Returns:
    ;   The flattend list.

    (if args
      (qq
        (--cypher.itertools.chain
          (unquote (f args))
          (@cypher.itertools.chain . (unquote (r args)))
        )
      )
      cypher.constants.NIL
    )
  )
  (defun cypher.itertools.chain (args)
    ;; Flatten multiple args, function form.
    ;
    ; Args:
    ;   args: list of list to flatten.
    ;
    ; Returns:
    ;   The flattend list.

    (if args
      (--cypher.itertools.chain
        (f args)
        (cypher.itertools.chain (r args))
      )
      cypher.constants.NIL
    )
  )

  ; map

  (defmacro --@cypher.itertools.map (fn args is_lambda)
    (if args
      (qq
        (c
          (--@cypher.utils.apply
            (unquote fn) (unquote (f args)) (unquote is_lambda)
          )
          (--@cypher.itertools.map
            (unquote fn) (unquote (r args)) (unquote is_lambda)
          )
        )
      )
      cypher.constants.NIL
    )
  )
  (defmacro @cypher.itertools.map (fn . args)
    ;; Apply map function to each element, macro form.
    ;
    ; Args:
    ;   func: function body.
    ;   args: list of arguments to apply func on.
    ;
    ; Returns:
    ;   A list of mapped results from func.

    (qq
      (--@cypher.itertools.map
        (unquote fn) (unquote args) (unquote (l fn))
      )
    )
  )

  (defun --cypher.itertools.map.stager (fn args is_lambda)
    (if args
      (c
        (--@cypher.utils.apply fn (f args) is_lambda)
        (--cypher.itertools.map.stager fn (r args) is_lambda)
      )
      cypher.constants.NIL
    )
  )
  (defun --cypher.itertools.map (fn args is_lambda)
    ; This is to "resolve" the symbol `func`, and if it is still is an atom,
    ;   it can be either still a symbol name, or a simple path as a function.

    (if (--cypher.utils.is-printable-str fn)
      (x
        (concat
          "`defun-inline` symbol does not work with `cf.map`! "
          "Please use `defun` of lambda functions instead."
        )
      )
      (--cypher.itertools.map.stager fn args is_lambda)
    )
  )
  (defmacro cypher.itertools.map (fn args)
    ;; Apply map function to each element, function form.
    ;
    ; Note that:
    ;   Chialisp's `(func args)` is secretly clvm's `func` application with
    ;   `func` at position 2 and `args` at position 3, so
    ;
    ;     (func args) => (a func (c func args))
    ;
    ;   For lambda functions, they don't send themselves to the function body, so
    ;
    ;     (func args) => (a func args)
    ;
    ; Args:
    ;   func: function.
    ;   args: list of arguments to apply func on.
    ;
    ; Returns:
    ;   A list of mapped results from func.

    (qq
      (--cypher.itertools.map.stager
        (unquote fn)
        (unquote args)
        (unquote (l fn))
      )
    )
  )

  ; filter

  (defun --cypher.itertools.filter (fn args is_lambda)
    (if args
      (if (--@cypher.utils.apply fn (f args) is_lambda)
        (c
          (f args)
          (--cypher.itertools.filter fn (r args) is_lambda)
        )
        (--cypher.itertools.filter fn (r args) is_lambda)
      )
      cypher.constants.NIL
    )
  )
  (defmacro cypher.itertools.filter (fn args)
    (qq
      (--cypher.itertools.filter
        (unquote fn)
        (unquote args)
        (unquote (l fn))
      )
    )
  )

  ; reduce

  (defmacro @cypher.itertools.reduce (fn initializer context . args)
    ;; Apply reduce function to each element sequentially, macro form.
    ;
    ; Args:
    ;   func: function body.
    ;   initializer: initial value for reduction.
    ;   context: global arguments for reduction.
    ;   args: list of arguments to apply reduction func on.
    ;
    ; Returns:
    ;   A reduced value.

    (if args
      (qq
        ((unquote fn)
          (unquote (f args))
          (@cypher.itertools.reduce
            (unquote fn) (unquote initializer) (unquote context) . (unquote (r args))
          )
          (unquote context)
        )
      )
      initializer
    )
  )

  (defun cypher.itertools.reduce (fn initializer context args)
    ;; Apply reduce function to each element sequentially, function form.
    ;
    ; Args:
    ;   func: function that takes the arguments: (arg agg context), where
    ;     arg: the current argument,
    ;     agg: the reduced value, and
    ;     context: the global arguments.
    ;
    ;   initializer: initial value for reduction.
    ;   context: global arguments.
    ;   args: list of arguments to apply reduction func on.
    ;
    ; Returns:
    ;   A reduced value.

    (if args
      (fn
        (f args)
        (cypher.itertools.reduce
          fn initializer context (r args)
        )
        context
      )
      initializer
    )
  )

  ;; Exports

  (defmacro cf.length args
    (c cypher.itertools.length args))

  (defmacro cf.range args
    (c cypher.itertools.range args))

  (defmacro cf.slice args
    (c cypher.itertools.slice args))
  (defmacro cf.reverse args
    (c cypher.itertools.reverse args))
  (defmacro @cf.chain args
    (c @cypher.itertools.chain args))
  (defmacro cf.chain args
    (c cypher.itertools.chain args))

  (defmacro @cf.map args
    (c @cypher.itertools.map args))
  (defmacro cf.map args
    (c cypher.itertools.map args))
  (defmacro cf.filter args
    (c cypher.itertools.filter args))
  (defmacro @cf.reduce args
    (c @cypher.itertools.reduce args))
  (defmacro cf.reduce args
    (c cypher.itertools.reduce args))
)
