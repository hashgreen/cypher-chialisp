;;; Iterator processing library.
;
; Mocks the design of python itertools module.

(
  (defun --cypher.itertools.chain (args_a args_b)
    ;; Flatten two args.
    ;
    ; Args:
    ;   args_a: list
    ;   args_b: Another list.
    ;
    ; Returns:
    ;   The flattend list.

    (if args_a
      (c
        (f args_a)
        (--cypher.itertools.chain (r args_a) args_b)
      )
      args_b
    )
  )

  (defmacro @cypher.itertools.chain args_list
    ;; Flatten multiple args.
    ;
    ; Args:
    ;   args: list of list to flatten.
    ;
    ; Returns:
    ;   The flattend list.

    (if args_list
      (qq
        (--cypher.itertools.chain
          (unquote (f args_list))
          (@cypher.itertools.chain . (unquote (r args_list)))
        )
      )
      cypher.constants.NIL
    )
  )
  (defun cypher.itertools.chain args_list
    (if args_list
      (--cypher.itertools.chain
        (f args_list)
        (cypher.itertools.chain . (r args_list))
      )
      cypher.constants.NIL
    )
  )

  (defmacro @cypher.itertools.map (func args)
    ;; Apply map function to each element.
    ;
    ; Args:
    ;   func: function symbol name.
    ;   args: list of arguments to apply func on.
    ;
    ; Returns:
    ;   A list of mapped results from func.

    (if args
      (qq
        (c
          ; (unquote (c func (f args)))
          (unquote (c list (f args)))
          ; (unquote (list @cypher.itertools.map (list func (r args))))
          ()
        )
      )
      cypher.constants.NIL
    )
  )
  (defun cypher.itertools.map (func args)
    (if args
      (c
        (func (f args))
        (cypher.itertools.map func (r args))
      )
      cypher.constants.NIL
    )
  )

  (defun cypher.itertools.reduce (func args agg_init global_args)
    ;; Apply reduce function to each element sequentially.
    ;
    ; Args:
    ;   func: Function symbol name.
    ;   args: List of arguments to apply func on.
    ;   agg_init: Initial value.
    ;   global_args: Global arguments.
    ;
    ; Returns:
    ;   A reduced value.

    (if args
      (func
        (f args)
        (cypher.itertools.reduce func (r args) agg_init global_args)
        global_args
      )
      agg_init
    )
  )

  ;; Exports

  (defmacro cf.chain args (c cypher.itertools.chain args))
  (defmacro @cf.chain args (c @cypher.itertools.chain args))
  (defmacro cf.map args (c cypher.itertools.map args))
  (defmacro cf.reduce args (c cypher.itertools.reduce args))
)
