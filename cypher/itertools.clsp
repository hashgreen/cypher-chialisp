;; Iterator processing library.
;
; Mocks the design of python itertools module.

(
  (defun cypher.itertools.chain-two (iterable_a iterable_b)
    ;; Flatten two iterables.
    ;
    ; Args:
    ;   iterable_a: List.
    ;   iterable_b: Another list.
    ;
    ; Returns:
    ;   The flattend list.

    (if iterable_a
      (c
        (f iterable_a)
        (cypher.itertools.chain-two
          (r iterable_a)
          iterable_b
        )
      )
      iterable_b
    )
  )

  (defun cypher.itertools.chain (iterables)
    ;; Flatten multiple iterables.
    ;
    ; Args:
    ;   iterables: List of list to flatten.
    ;
    ; Returns:
    ;   The flattend list.

    (if iterables
      (cypher.itertools.chain-two
        (f iterables)
        (cypher.itertools.chain (r iterables))
      )
      cypher.constants.NIL
    )
  )

  (defun cypher.itertools.map (func args)
    ;; Apply map function to each element.
    ;
    ; Args:
    ;   func: Compiled function. More commonly done by
    ;     (mod (arg) (...)).
    ;   args: List of arguments to apply func on.
    ;
    ; Returns:
    ;   A list of mapped results from func.

    (if args
      (c
        (a func (list (f args)))
        (cypher.itertools.map func (r args))
      )
      cypher.constants.NIL
    )
  )

  (defun cypher.itertools.reduce (func args init)
    ;; Apply reduce function to each element sequentially.
    ;
    ; Args:
    ;   func: Compiled function. More commonly done by
    ;     (mod (arg) (...)) or (lambda (arg) ...).
    ;     Must accept two arguments `arg` and `agg`.
    ;   args: List of arguments to apply func on.
    ;   init: Initial value.
    ;
    ; Returns:
    ;   A reduced value.
    ;
    ; The `reduce` function will begin from the left, sequentially perform
    ;   - agg_0 <- (a func (list arg_0 init))
    ;   - agg_1 <- (a func (list arg_1 agg))
    ;   ... until the list is exhausted.

    (if args
      (a
        func
        (list (f args) (cypher.itertools.reduce func (r args) init))
      )
      init
    )
  )

  ;; Exports

  (defmacro cf.chain-two args (c cypher.itertools.chain-two args))
  (defmacro cf.chain args (c cypher.itertools.chain args))
  (defmacro cf.map args (c cypher.itertools.map args))
  (defmacro cf.reduce args (c cypher.itertools.reduce args))
)
