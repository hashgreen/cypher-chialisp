;; Hashing library.

(
  (defun-inline @cypher.hashlib.sha256one (tree)
    (sha256 cypher.constants.ONE tree)
  )

  (defun-inline @cypher.hashlib.sha256two (f_tree r_tree)
    (sha256 cypher.constants.TWO f_tree r_tree))

  (defun cypher.hashlib.sha256tree (tree)
    ;; Takes a lisp tree and returns the hash of it.
    ;
    ; Taken from chia/wallet/puzzles/sha256tree_module.clvm.
    ;
    ; Args:
    ;   tree: The tree to take hash of.
    ;
    ; Returns:
    ;   The tree hash of the input.

    (if (l tree)
      (@cypher.hashlib.sha256two
        (cypher.hashlib.sha256tree (f tree))
        (cypher.hashlib.sha256tree (r tree))
      )
      (@cypher.hashlib.sha256one tree)
    )
  )

  (defun-inline cypher.hashlib.update-hash-for-parameter-hash
    (parameter_hash environment_hash)
    ;; Given the tree hash `environment_hash` of an environment tree E
    ;; and the tree hash `paramete_-hash` of a constant parameter P
    ;; return the tree hash of the tree corresponding to `(c (q . P) E)`.
    ;
    ; Taken from chia/wallet/puzzles/curry-and-treehash.clinc.
    ;
    ; This is the new environment tree with the addition parameter P curried in.
    ; Note that `(c (q . P) E)` = `(c . ((q . P) . (E . 0)))`

    (@cypher.hashlib.sha256two
      (@cypher.hashlib.sha256one cypher.opcodes.CONS)
      (@cypher.hashlib.sha256two
        (@cypher.hashlib.sha256two
          (@cypher.hashlib.sha256one cypher.opcodes.QUOTE)
          parameter_hash
        )
        (@cypher.hashlib.sha256two
          environment_hash
          (@cypher.hashlib.sha256one cypher.constants.ZERO)
        )
      )
    )
  )

  (defun-inline @cypher.hashlib.tree-hash-of-apply
    (function_hash environment_hash)
    ;; Given the tree hash `environment_hash` of an environment tree E
    ;; and the tree hash `function_hash` of a function tree F
    ;; return the tree hash of the tree corresponding to `(a (q . F) E)`.
    ;
    ; Taken from chia/wallet/puzzles/curry-and-treehash.clinc.
    ;
    ; This is the hash of a new function that adopts the new environment E.
    ; This is used to build of the tree hash of a curried function.
    ;
    ; Note that `(a (q . F) E)` = `(a . ((q . F)  . (E . 0)))`.

    (@cypher.hashlib.sha256two
      (@cypher.hashlib.sha256one cypher.opcodes.APPLY)
      (@cypher.hashlib.sha256two
        (@cypher.hashlib.sha256two
          (@cypher.hashlib.sha256one cypher.opcodes.QUOTE)
          function_hash
        )
        (@cypher.hashlib.sha256two
          environment_hash
          (@cypher.hashlib.sha256one cypher.constants.ZERO)
        )
      )
    )
  )

  (defun cypher.hashlib.build-curry-list@v1
    (reversed_curry_parameter_hashes environment_hash)
    ;; This function recursively calls `update-hash-for-parameter-hash`,
    ;; updating `environment-hash` along the way.
    ;
    ; Taken from chia/wallet/puzzles/curry-and-treehash.clinc.

    (if reversed_curry_parameter_hashes
      (cypher.hashlib.build-curry-list@v1
        (r reversed_curry_parameter_hashes)
        (cypher.hashlib.update-hash-for-parameter-hash
          (f reversed_curry_parameter_hashes)
          environment_hash
        )
      )
      environment_hash
    )
  )

  (defun cypher.hashlib.build-curry-list@v2
    (curry_parameter_hashes environment_hash)
    ;; This function recursively calls `update-hash-for-parameter-hash`,
    ;; updating `environment-hash` along the way.
    ;
    ; Note this function takes `curry_parameter_hashes` in normal order, as
    ; opposed to `cypher.hashlib.build-curry-list@v1` where the order is
    ; reversed.

    (if curry_parameter_hashes
      (cypher.hashlib.update-hash-for-parameter-hash
        (f curry_parameter_hashes)
        (cypher.hashlib.build-curry-list@v2
          (r curry_parameter_hashes)
          environment_hash
        )
      )
      environment_hash
    )
  )

  (defun-inline @cypher.hashlib.puzzle-hash-of-curried-function@v1
    (function_hash . reversed_curry_parameter_hashes)
    ;; Calculate of the tree hash of a curried function without actually
    ;; doing the curry, and using other optimization tricks like unrolling
    ;; `sha256tree`.
    ;
    ; Taken from chia/wallet/puzzles/curry-and-treehash.clinc.
    ;
    ; Note that from a user's perspective the hashes passed in here aren't
    ; simply the hashes of the desired parameters, but their treehash
    ; representation since that's the form we're assuming they take in the
    ; acutal curried program.
    ;
    ; Args:
    ;   function_hash: the hash of a puzzle function, ie. a `mod`
    ;   reversed_curry_parameter_hashes: a list of pre-hashed trees
    ;     representing parameters to be curried into the puzzle. Note that this
    ;     must be applied in REVERSED order. This may seem strange, but it
    ;     greatly simplifies the underlying code, since we calculate the tree
    ;     hash from the bottom nodes up, and the last parameters curried must
    ;     have their hashes calculated first.
    ;
    ; Returns:
    ;   The hash of the curried expression.
    ;     (a (q . function-hash) (c (cp1 (c cp2 (c ... 1)...))))

    (@cypher.hashlib.tree-hash-of-apply
      function_hash
      (cypher.hashlib.build-curry-list@v1
        reversed_curry_parameter_hashes
        (sha256 cypher.constants.ONE cypher.constants.ONE)
      )
    )
  )
  (defun cypher.hashlib.puzzle-hash-of-curried-function@v1
    (function_hash . reversed_curry_parameter_hashes)
    (@cypher.hashlib.puzzle-hash-of-curried-function@v1
      function_hash . reversed_curry_parameter_hashes))

  (defun-inline @cypher.hashlib.puzzle-hash-of-curried-function@v2
    (function_hash . curry_parameter_hashes)
    ;; Calculate of the tree hash of a curried function without actually
    ;; doing the curry, and using other optimization tricks like unrolling
    ;; `sha256tree`.
    ;
    ; Note this function takes `curry_parameter_hashes` in normal order, as
    ; opposed to `cypher.hashlib.puzzle-hash-of-curried-function@v1` where the
    ; order is reversed.

    (@cypher.hashlib.tree-hash-of-apply
      function_hash
      (cypher.hashlib.build-curry-list@v2
        curry_parameter_hashes
        (sha256 cypher.constants.ONE cypher.constants.ONE)
      )
    )
  )
  (defun cypher.hashlib.puzzle-hash-of-curried-function@v2
    (function_hash . curry_parameter_hashes)
    (@cypher.hashlib.puzzle-hash-of-curried-function@v2
      function_hash . curry_parameter_hashes))

  ;; Exports

  (defmacro @cf.sha256one args
    (c @cypher.hashlib.sha256one args))
  (defmacro @cf.sha256two args
    (c @cypher.hashlib.sha256two args))

  (defmacro cf.sha256tree args
    (c cypher.hashlib.sha256tree args))

  (defmacro @cf.puzzle-hash-of-curried-function@v1 args
    (c @cypher.hashlib.puzzle-hash-of-curried-function@v1 args))
  (defmacro cf.puzzle-hash-of-curried-function@v1 args
    (c cypher.hashlib.puzzle-hash-of-curried-function@v1 args))
  (defmacro @cf.puzzle-hash-of-curried-function@v2 args
    (c @cypher.hashlib.puzzle-hash-of-curried-function@v2 args))
  (defmacro cf.puzzle-hash-of-curried-function@v2 args
    (c cypher.hashlib.puzzle-hash-of-curried-function@v2 args))

  (defmacro cf.puzzle-hash-of-curried-function args
    (c cypher.hashlib.puzzle-hash-of-curried-function@v1 args))
  (defmacro @cf.puzzle-hash-of-curried-function args
    (c @cypher.hashlib.puzzle-hash-of-curried-function@v1 args))
)
