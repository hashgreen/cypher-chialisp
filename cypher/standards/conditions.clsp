(
  ; Condition

  (defun-inline cypher.standards.conditions.Condition (condition_code f . r)
    (list condition_code f . r))
  (defun-inline cypher.standards.conditions.Condition.is-condition (condition_code condition)
    (= (cypher.standards.conditions.Condition.get-condition-code condition) condition_code))

  (defun-inline cypher.standards.conditions.Condition.get-condition-code (condition)
    (f condition))
  (defun-inline cypher.standards.conditions.Condition.output-amount (condition)
    (if (cypher.standards.conditions.CreateCoin.is-condition condition)
      (cypher.standards.conditions.CreateCoin.get-amount condition) 0))

  ; AggSigUnsafe

  (defun-inline cypher.standards.conditions.AggSigUnsafe (pubkey message)
    (cypher.standards.conditions.Condition AGG_SIG_UNSAFE pubkey message))
  (defun-inline cypher.standards.conditions.AggSigUnsafe.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition AGG_SIG_UNSAFE condition))
  (defun-inline cypher.standards.conditions.AggSigUnsafe.get-pubkey (condition)
    (f (r condition)))
  (defun-inline cypher.standards.conditions.AggSigUnsafe.get-pubkey-rest (condition)
    (r (r condition)))
  (defun-inline cypher.standards.conditions.AggSigUnsafe.get-message (condition)
    (f (r (r condition))))
  (defun-inline cypher.standards.conditions.AggSigUnsafe.get-message-rest (condition)
    (r (r (r condition))))

  ; AggSigMe

  (defun-inline cypher.standards.conditions.AggSigMe (pubkey message)
    (cypher.standards.conditions.Condition AGG_SIG_ME pubkey message))
  (defun-inline cypher.standards.conditions.AggSigMe.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition AGG_SIG_ME condition))
  (defun-inline cypher.standards.conditions.AggSigMe.get-pubkey (condition)
    (f (r condition)))
  (defun-inline cypher.standards.conditions.AggSigMe.get-pubkey-rest (condition)
    (r (r condition)))
  (defun-inline cypher.standards.conditions.AggSigMe.get-message (condition)
    (f (r (r condition))))
  (defun-inline cypher.standards.conditions.AggSigMe.get-message-rest (condition)
    (r (r (r condition))))

  ; CreateCoin

  (defun-inline cypher.standards.conditions.CreateCoin (puzzle_hash amount)
    (cypher.standards.conditions.Condition CREATE_COIN puzzle_hash amount))
  (defun-inline cypher.standards.conditions.CreateCoin.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition CREATE_COIN condition))
  (defun-inline cypher.standards.conditions.CreateCoin.get-puzzle-hash (condition)
    (f (r condition)))
  (defun-inline cypher.standards.conditions.CreateCoin.get-puzzle-hash-rest (condition)
    (r (r condition)))
  (defun-inline cypher.standards.conditions.CreateCoin.get-amount (condition)
    (f (r (r condition))))
  (defun-inline cypher.standards.conditions.CreateCoin.get-amount-rest (condition)
    (r (r (r condition))))

  ; ReserveFee

  (defun-inline cypher.standards.conditions.ReserveFee (amount)
    (cypher.standards.conditions.Condition RESERVE_FEE amount))
  (defun-inline cypher.standards.conditions.ReserveFee.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition RESERVE_FEE condition))
  (defun-inline cypher.standards.conditions.ReserveFee.get-amount (condition)
    (f (r condition)))
  (defun-inline cypher.standards.conditions.ReserveFee.get-amount-rest (condition)
    (r (r condition)))

  ; CreateCoinAnnouncement

  (defun-inline cypher.standards.conditions.CreateCoinAnnouncement (message)
    (cypher.standards.conditions.Condition CREATE_COIN_ANNOUNCEMENT message))
  (defun-inline cypher.standards.conditions.CreateCoinAnnouncement.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition CREATE_COIN_ANNOUNCEMENT condition))
  (defun-inline cypher.standards.conditions.CreateCoinAnnouncement.get-message (condition)
    (f (r condition)))
  (defun-inline cypher.standards.conditions.CreateCoinAnnouncement.get-message-rest (condition)
    (r (r condition)))

  ; AssertCoinAnnouncement

  (defun-inline cypher.standards.conditions.AssertCoinAnnouncement (coin_id message)
    (list ASSERT_COIN_ANNOUNCEMENT (sha256 coin_id message)))
  (defun-inline cypher.standards.conditions.AssertCoinAnnouncement.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition ASSERT_COIN_ANNOUNCEMENT condition))

  ; CreatePuzzleAnnouncement

  (defun-inline cypher.standards.conditions.CreatePuzzleAnnouncement (message)
    (cypher.standards.conditions.Condition CREATE_PUZZLE_ANNOUNCEMENT message))
  (defun-inline cypher.standards.conditions.CreatePuzzleAnnouncement.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition CREATE_PUZZLE_ANNOUNCEMENT condition))
  (defun-inline cypher.standards.conditions.CreatePuzzleAnnouncement.get-message (condition)
    (f (r condition)))
  (defun-inline cypher.standards.conditions.CreatePuzzleAnnouncement.get-message-rest (condition)
    (r (r condition)))

  ; AssertPuzzleAnnouncement

  (defun-inline cypher.standards.conditions.AssertPuzzleAnnouncement (puzzle_hash message)
    (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256 puzzle_hash message)))
  (defun-inline cypher.standards.conditions.AssertPuzzleAnnouncement.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition ASSERT_PUZZLE_ANNOUNCEMENT condition))

  ; AssertMyCoinID

  (defun-inline cypher.standards.conditions.AssertMyCoinID (coin_id)
    (list ASSERT_MY_COIN_ID coin_id))
  (defun-inline cypher.standards.conditions.AssertMyCoinID.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition ASSERT_MY_COIN_ID condition))

  ; AssertMyParentID

  (defun-inline cypher.standards.conditions.AssertMyParentID (coin_id)
    (list ASSERT_MY_PARENT_ID coin_id))
  (defun-inline cypher.standards.conditions.AssertMyParentID.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition ASSERT_MY_PARENT_ID condition))

  ; AssertMyPuzzleHash

  (defun-inline cypher.standards.conditions.AssertMyPuzzleHash (puzzle_hash)
    (list ASSERT_MY_PUZZLEHASH puzzle_hash))
  (defun-inline cypher.standards.conditions.AssertMyPuzzleHash.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition ASSERT_MY_PUZZLEHASH condition))

  ; AssertMyAmount

  (defun-inline cypher.standards.conditions.AssertMyAmount (amount)
    (list ASSERT_MY_AMOUNT amount))
  (defun-inline cypher.standards.conditions.AssertMyAmount.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition ASSERT_MY_AMOUNT condition))

  ; AssertSecondsRelative

  (defun-inline cypher.standards.conditions.AssertSecondsRelative (seconds)
    (list ASSERT_SECONDS_RELATIVE seconds))
  (defun-inline cypher.standards.conditions.AssertSecondsRelative.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition ASSERT_SECONDS_RELATIVE condition))

  ; AssertSecondsAbsolute

  (defun-inline cypher.standards.conditions.AssertSecondsAbsolute (seconds)
    (list ASSERT_SECONDS_ABSOLUTE seconds))
  (defun-inline cypher.standards.conditions.AssertSecondsAbsolute.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition ASSERT_SECONDS_ABSOLUTE condition))

  ; AssertHeightRelative

  (defun-inline cypher.standards.conditions.AssertHeightRelative (height)
    (list ASSERT_HEIGHT_RELATIVE height))
  (defun-inline cypher.standards.conditions.AssertHeightRelative.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition ASSERT_HEIGHT_RELATIVE condition))

  ; AssertHeightAbsolute

  (defun-inline cypher.standards.conditions.AssertHeightAbsolute (height)
    (list ASSERT_HEIGHT_ABSOLUTE height))
  (defun-inline cypher.standards.conditions.AssertHeightAbsolute.is-condition (condition)
    (cypher.standards.conditions.Condition.is-condition ASSERT_HEIGHT_ABSOLUTE condition))

  ;; Exports

  (defmacro cf.Condition args
    (c cypher.standards.conditions.Condition args))
  (defmacro cf.Condition.is-condition args
    (c cypher.standards.conditions.Condition.is-condition args))
  (defmacro cf.Condition.get-condition-code args
    (c cypher.standards.conditions.Condition.get-condition-code args))
  (defmacro cf.Condition.output-amount args
    (c cypher.standards.conditions.Condition.output-amount args))

  (defmacro cf.AggSigUnsafe args
    (c cypher.standards.conditions.AggSigUnsafe args))
  (defmacro cf.AggSigUnsafe.is-condition args
    (c cypher.standards.conditions.AggSigUnsafe.is-condition args))
  (defmacro cf.AggSigUnsafe.get-pubkey args
    (c cypher.standards.conditions.AggSigUnsafe.get-pubkey args))
  (defmacro cf.AggSigUnsafe.get-pubkey-rest args
    (c cypher.standards.conditions.AggSigUnsafe.get-pubkey-rest args))
  (defmacro cf.AggSigUnsafe.get-message args
    (c cypher.standards.conditions.AggSigUnsafe.get-message args))
  (defmacro cf.AggSigUnsafe.get-message-rest args
    (c cypher.standards.conditions.AggSigUnsafe.get-message-rest args))

  (defmacro cf.AggSigMe args
    (c cypher.standards.conditions.AggSigMe args))
  (defmacro cf.AggSigMe.is-condition args
    (c cypher.standards.conditions.AggSigMe.is-condition args))
  (defmacro cf.AggSigMe.get-pubkey args
    (c cypher.standards.conditions.AggSigMe.get-pubkey args))
  (defmacro cf.AggSigMe.get-pubkey-rest args
    (c cypher.standards.conditions.AggSigMe.get-pubkey-rest args))
  (defmacro cf.AggSigMe.get-message args
    (c cypher.standards.conditions.AggSigMe.get-message args))
  (defmacro cf.AggSigMe.get-message-rest args
    (c cypher.standards.conditions.AggSigMe.get-message-rest args))

  (defmacro cf.ReserveFee args
    (c cypher.standards.conditions.ReserveFee args))
  (defmacro cf.ReserveFee.is-condition args
    (c cypher.standards.conditions.ReserveFee.is-condition args))
  (defmacro cf.ReserveFee.get-amount args
    (c cypher.standards.conditions.ReserveFee.get-amount args))
  (defmacro cf.ReserveFee.get-amount-rest args
    (c cypher.standards.conditions.ReserveFee.get-amount-rest args))

  (defmacro cf.CreateCoin args
    (c cypher.standards.conditions.CreateCoin args))
  (defmacro cf.CreateCoin.is-condition args
    (c cypher.standards.conditions.CreateCoin.is-condition args))
  (defmacro cf.CreateCoin.get-puzzle-hash args
    (c cypher.standards.conditions.CreateCoin.get-puzzle-hash args))
  (defmacro cf.CreateCoin.get-puzzle-hash-rest args
    (c cypher.standards.conditions.CreateCoin.get-puzzle-hash-rest args))
  (defmacro cf.CreateCoin.get-amount args
    (c cypher.standards.conditions.CreateCoin.get-amount args))
  (defmacro cf.CreateCoin.get-amount-rest args
    (c cypher.standards.conditions.CreateCoin.get-amount-rest args))

  (defmacro cf.CreateCoinAnnouncement args
    (c cypher.standards.conditions.CreateCoinAnnouncement args))
  (defmacro cf.CreateCoinAnnouncement.is-condition args
    (c cypher.standards.conditions.CreateCoinAnnouncement.is-condition args))
  (defmacro cf.CreateCoinAnnouncement.get-message args
    (c cypher.standards.conditions.CreateCoinAnnouncement.get-message args))
  (defmacro cf.CreateCoinAnnouncement.get-message-rest args
    (c cypher.standards.conditions.CreateCoinAnnouncement.get-message-rest args))

  (defmacro cf.AssertCoinAnnouncement args
    (c cypher.standards.conditions.AssertCoinAnnouncement args))
  (defmacro cf.AssertCoinAnnouncement.is-condition args
    (c cypher.standards.conditions.AssertCoinAnnouncement.is-condition args))

  (defmacro cf.CreatePuzzleAnnouncement args
    (c cypher.standards.conditions.CreatePuzzleAnnouncement args))
  (defmacro cf.CreatePuzzleAnnouncement.is-condition args
    (c cypher.standards.conditions.CreatePuzzleAnnouncement.is-condition args))
  (defmacro cf.CreatePuzzleAnnouncement.get-message args
    (c cypher.standards.conditions.CreatePuzzleAnnouncement.get-message args))
  (defmacro cf.CreatePuzzleAnnouncement.get-message-rest args
    (c cypher.standards.conditions.CreatePuzzleAnnouncement.get-message-rest args))

  (defmacro cf.AssertPuzzleAnnouncement args
    (c cypher.standards.conditions.AssertPuzzleAnnouncement args))
  (defmacro cf.AssertPuzzleAnnouncement.is-condition args
    (c cypher.standards.conditions.AssertPuzzleAnnouncement.is-condition args))

  (defmacro cf.AssertMyCoinID args
    (c cypher.standards.conditions.AssertMyCoinID args))
  (defmacro cf.AssertMyCoinID.is-condition args
    (c cypher.standards.conditions.AssertMyCoinID.is-condition args))

  (defmacro cf.AssertMyParentID args
    (c cypher.standards.conditions.AssertMyParentID args))
  (defmacro cf.AssertMyParentID.is-condition args
    (c cypher.standards.conditions.AssertMyParentID.is-condition args))

  (defmacro cf.AssertMyPuzzleHash args
    (c cypher.standards.conditions.AssertMyPuzzleHash args))
  (defmacro cf.AssertMyPuzzleHash.is-condition args
    (c cypher.standards.conditions.AssertMyPuzzleHash.is-condition args))

  (defmacro cf.AssertMyAmount args
    (c cypher.standards.conditions.AssertMyAmount args))
  (defmacro cf.AssertMyAmount.is-condition args
    (c cypher.standards.conditions.AssertMyAmount.is-condition args))

  (defmacro cf.AssertSecondsRelative args
    (c cypher.standards.conditions.AssertSecondsRelative args))
  (defmacro cf.AssertSecondsRelative.is-condition args
    (c cypher.standards.conditions.AssertSecondsRelative.is-condition args))

  (defmacro cf.AssertSecondsAbsolute args
    (c cypher.standards.conditions.AssertSecondsAbsolute args))
  (defmacro cf.AssertSecondsAbsolute.is-condition args
    (c cypher.standards.conditions.AssertSecondsAbsolute.is-condition args))

  (defmacro cf.AssertHeightRelative args
    (c cypher.standards.conditions.AssertHeightRelative args))
  (defmacro cf.AssertHeightRelative.is-condition args
    (c cypher.standards.conditions.AssertHeightRelative.is-condition args))

  (defmacro cf.AssertHeightAbsolute args
    (c cypher.standards.conditions.AssertHeightAbsolute args))
  (defmacro cf.AssertHeightAbsolute.is-condition args
    (c cypher.standards.conditions.AssertHeightAbsolute.is-condition args))
)
