;;; Chia Coins.
;
; Corresponds to `chia.types.blockchain_format.coin.Coin` in the Python codebase.
;   https://github.com/Chia-Network/chia-blockchain/blob/1.8.1/chia/types/blockchain_format/coin.py

(
  (defun-inline cypher.standards.coin.Coin
    (parent_id puzzle_hash amount)
    (list parent_id puzzle_hash amount))
  (defun-inline cypher.standards.coin.Coin.get-parent-id (coin)
    (f coin))
  (defun-inline cypher.standards.coin.Coin.get-parent-id-rest (coin)
    (r coin))
  (defun-inline cypher.standards.coin.Coin.get-puzzle-hash (coin)
    (f (r coin)))
  (defun-inline cypher.standards.coin.Coin.get-puzzle-hash-rest (coin)
    (r (r coin)))
  (defun-inline cypher.standards.coin.Coin.get-amount (coin)
    (f (r (r coin))))

  (defun-inline cypher.standards.coin.Coin.id (coin)
    ; Note this coin id is unsafe to use in most cases unless you have verified all inputs.

    (sha256
      (cypher.standards.coin.Coin.get-parent-id coin)
      (cypher.standards.coin.Coin.get-puzzle-hash coin)
      (cypher.standards.coin.Coin.get-amount coin)))

  (defun-inline cypher.standards.coin.Coin.verified-id (coin)
    (if
      (all
        (= (strlen (cypher.standards.coin.Coin.get-parent-id coin)) 32)
        (= (strlen (cypher.standards.coin.Coin.get-puzzle-hash coin)) 32)
        (> (cypher.standards.coin.Coin.get-amount coin) -1)
      )
      (cypher.standards.coin.Coin.id coin)
      (x)
    )
  )

  ;; Exports

  (defmacro cf.Coin args
    (c cypher.standards.coin.Coin args))
  (defmacro cf.Coin.get-parent-id args
    (c cypher.standards.coin.Coin.get-parent-id args))
  (defmacro cf.Coin.get-parent-id-rest args
    (c cypher.standards.coin.Coin.get-parent-id-rest args))
  (defmacro cf.Coin.get-puzzle-hash args
    (c cypher.standards.coin.Coin.get-puzzle-hash args))
  (defmacro cf.Coin.get-puzzle-hash-rest args
    (c cypher.standards.coin.Coin.get-puzzle-hash-rest args))
  (defmacro cf.Coin.get-amount args
    (c cypher.standards.coin.Coin.get-amount args))
  (defun-inline cf.Coin.id args
    ; We do not export `cypher.standards.coin.Coin.id` because of its unsafe nature.
    ; One needs to specify `cf.Coin.id@safe` or `cf.Coin.id@unsafe` to get the
    ; desired behavior.

    (x "cf.Coin.id: Please specify `cf.Coin.id@safe` or `cf.Coin.id@unsafe`."))
  (defmacro cf.Coin.id@unsafe args
    (c cypher.standards.coin.Coin.id args))
  (defmacro cf.Coin.id@safe args
    (c cypher.standards.coin.Coin.verified-id args))
)
