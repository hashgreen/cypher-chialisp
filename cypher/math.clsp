;;; Math functions.

(
  ;; Dependencies:
  ;
  ; (include cypher/fracmath.clsp)
  ; (include cypher/utils.clsp)

  ;; Unary operators.

  (defun-inline @cypher.math.abs (var)
    ;; Absolute value.
    ;
    ; Args:
    ;   var: The number to take the absolute value of.
    ;
    ; Returns:
    ;   An integer, the absolute value of `var`.

    (if (> var 0) var (- 0 var))
  )
  (defun cypher.math.abs (var)
    (@cypher.math.abs var))

  (defun-inline @cypher.math.neg (var)
    ;; Negation.
    ;
    ; Args:
    ;   var: The number to negate.
    ;
    ; Returns:
    ;   An integer, the negation of `var`.

    (- 0 var)
  )
  (defun cypher.math.neg (var)
    (@cypher.math.neg var))

  (defun-inline @cypher.math.round-down-to-even (var)
    ;; Round down to the nearest even number.
    ;
    ; Args:
    ;   var: The number to round.
    ;
    ; Returns:
    ;   An integer, the result of the rounding.

    (if (logand var 1) (- var 1) var)
  )
  (defun cypher.math.round-down-to-even (var)
    (@cypher.math.round-down-to-even var))

  (defun-inline @cypher.math.round-down-to-odd (var)
    ;; Round down to the nearest odd number.
    ;
    ; Args:
    ;   var: The number to round.
    ;
    ; Returns:
    ;   An integer, the result of the rounding.

    (if (logand var 1) var (- var 1))
  )
  (defun cypher.math.round-down-to-odd (var)
    (@cypher.math.round-down-to-odd var))

  (defun-inline @cypher.math.round-up-to-even (var)
    ;; Round up to the nearest even number.
    ;
    ; Args:
    ;   var: The number to round.
    ;
    ; Returns:
    ;   An integer, the result of the rounding.

    (if (logand var 1) (+ var 1) var)
  )
  (defun cypher.math.round-up-to-even (var)
    (@cypher.math.round-up-to-even var))

  (defun-inline @cypher.math.round-up-to-odd (var)
    ;; Round up to the nearest odd number.
    ;
    ; Args:
    ;   var: The number to round.
    ;
    ; Returns:
    ;   An integer, the result of the rounding.

    (if (logand var 1) var (+ var 1));
  )
  (defun cypher.math.round-up-to-odd (var)
    (@cypher.math.round-up-to-odd var))

  (defun --cypher.math.sqrt-loop-babylonian (var var1 var2)
    ;; Babylonian method for square root.
    ;
    ; See https://solidity-by-example.org/library/.
    ;
    ; Args:
    ;   var: The number to take the square root of.
    ;   var1: The previous guess.
    ;   var2: The current guess.
    ;
    ; Returns:
    ;   An integer, the result of the square root.

    (if (> var1 var2)
      (--cypher.math.sqrt-loop-babylonian
        var
        var2
        (ash (+ (@cypher.math.div var var2) var2) -1)
      )
      var1
    )
  )

  (defun-inline @cypher.math.sqrt (var)
    ;; Square root.
    ;
    ; Args:
    ;   var: The number to take the square root of.
    ;
    ; Returns:
    ;   An integer, the result of the square root.

    (@cypher.utils.if
      (> var 3)
      (--cypher.math.sqrt-loop-babylonian
        var
        var
        (+ (ash var -1) 1)
      )
      (> var 0) 1
      (= var 0) 0
      (x)
    )
  )
  (defun cypher.math.sqrt (var)
    (@cypher.math.sqrt var))

  (defun --cypher.math.str (var decimals)
    (@cypher.utils.if
      (> decimals 0)
      (concat
        (--cypher.math.str (@cypher.math.div var 10) (- decimals 1))
        (+ 48 (r (divmod var 10)))
      )
      ;
      (= decimals 0)
      (concat
        (--cypher.math.str (@cypher.math.div var 10) (- decimals 1))
        (+ 48 (r (divmod var 10)))
        "."
      )
      ;
      (all (= decimals -1) (> var 0))
      (concat
        (--cypher.math.str (@cypher.math.div var 10) -1)
        (+ 48 (r (divmod var 10)))
      )
      ;
      ""
    )
  )

  (defun-inline @cypher.math.str (var decimals)
    ;; Convert var to string.
    ;
    ; Args:
    ;   var: integer to convert.
    ;   decimals: decimal places. -1 to disable printing decimal point.
    ;
    ; Returns:
    ;   The string representation of `var`.

    (if
      (all (= var 0) (= decimals -1))
      "0"
      (concat
        (if (> 0 var) "-" "")
        (--cypher.math.str (@cypher.math.abs var) decimals)
      )
    )
  )
  (defun cypher.math.str (var decimals)
    (@cypher.math.str var decimals))

  ;; Binary operators.

  (defun-inline @cypher.math.gt (var1 var2)
    ;; Greater than.
    ;
    ; Args:
    ;   var1: The first number.
    ;   var2: The second number.
    ;
    ; Returns:
    ;   A boolean, the result of the comparison.

    (> var1 var2)
  )
  (defun cypher.math.gt (var1 var2)
    (@cypher.math.gt var1 var2))

  (defun-inline @cypher.math.ge (var1 var2)
    ;; Greater than or equal to.
    ;
    ; Args:
    ;   var1: The first number.
    ;   var2: The second number.
    ;
    ; Returns:
    ;   A boolean, the result of the comparison.

    (not (@cypher.math.lt var1 var2))
  )
  (defun cypher.math.ge (var1 var2)
    (@cypher.math.ge var1 var2))

  (defun-inline @cypher.math.lt (var1 var2)
    ;; Less than.
    ;
    ; Args:
    ;   var1: The first number.
    ;   var2: The second number.
    ;
    ; Returns:
    ;   A boolean, the result of the comparison.

    (> var2 var1)
    (@cypher.math.gt var2 var1)
  )
  (defun cypher.math.lt (var1 var2)
    (@cypher.math.lt var1 var2))

  (defun-inline @cypher.math.le (var1 var2)
    ;; Less than or equal to.
    ;
    ; Args:
    ;   var1: The first number.
    ;   var2: The second number.
    ;
    ; Returns:
    ;   A boolean, the result of the comparison.

    (not (@cypher.math.gt var1 var2))
  )
  (defun cypher.math.le (var1 var2)
    (@cypher.math.le var1 var2))

  (defun-inline @cypher.math.eq (var1 var2)
    ;; Equal to.
    ;
    ; Args:
    ;   var1: The first number.
    ;   var2: The second number.
    ;
    ; Returns:
    ;   A boolean, the result of the comparison.

    (= var1 var2)
  )
  (defun cypher.math.eq (var1 var2)
    (@cypher.math.eq var1 var2))

  (defun-inline @cypher.math.ne (var1 var2)
    ;; Not equal to.
    ;
    ; Args:
    ;   var1: The first number.
    ;   var2: The second number.
    ;
    ; Returns:
    ;   A boolean, the result of the comparison.

    (not (= var1 var2))
  )
  (defun cypher.math.ne (var1 var2)
    (@cypher.math.ne var1 var2))

  (defun-inline @cypher.math.add (augend addend)
    ;; Addition.
    ;
    ; Args:
    ;   augend: The augend.
    ;   addend: The addend.
    ;
    ; Returns:
    ;   An integer, the result of the addition.

    (+ augend addend)
  )
  (defun cypher.math.add (augend addend)
    (@cypher.math.add augend addend))

  (defun-inline @cypher.math.sub (minuend subtrahend)
    ;; Subtraction.
    ;
    ; Args:
    ;   minuend: The minuend.
    ;   subtrahend: The subtrahend.
    ;
    ; Returns:
    ;   An integer, the result of the subtraction.

    (- minuend subtrahend)
  )
  (defun cypher.math.sub (minuend subtrahend)
    (@cypher.math.sub minuend subtrahend))

  (defun-inline @cypher.math.unsigned-sub (minuend subtrahend)
    ;; Unsigned subtraction.
    ;
    ; Args:
    ;   minuend: The minuend.
    ;   subtrahend: The subtrahend.
    ;
    ; Returns:
    ;   An integer, the result of the unsigned subtraction.

    (if (> subtrahend minuend) (x) (- minuend subtrahend))
  )
  (defun cypher.math.unsigned-sub (minuend subtrahend)
    (@cypher.math.unsigned-sub minuend subtrahend))

  (defun-inline @cypher.math.div@unsafe (numer denom)
    ;; Division using the vanilla `/` operator.
    ;
    ; Args:
    ;   numer: The numerator.
    ;   denom: The denominator.
    ;
    ; Returns:
    ;   An integer, the result of the division.

    (/ numer denom)
  )
  (defun cypher.math.div@unsafe (numer denom)
    (@cypher.math.div@unsafe numer denom))

  (defun-inline @cypher.math.div (numer denom)
    ;; Division.
    ;
    ; The vanilla `/` operator has some unintended behavior, so we fall back to
    ; `divmod` operator.
    ;
    ; Args:
    ;   numer: The numerator.
    ;   denom: The denominator.
    ;
    ; Returns:
    ;   An integer, the result of the division.

    (f (divmod numer denom))
  )
  (defun cypher.math.div (numer denom)
    (@cypher.math.div numer denom))

  (defun --cypher.math.pow (base exponent)
    (if (> exponent 0)
      (* base (--cypher.math.pow base (- exponent 1)))
      1
    )
  )
  (defun-inline @cypher.math.pow (base exponent)
    ;; Naive power.
    ;
    ; Args:
    ;   base: The base.
    ;   exponent: The exponent.
    ;
    ; Returns:
    ;   An integer, the result of the power.

    (@cypher.utils.assert
      (not (> 0 exponent))
      (--cypher.math.pow base exponent)
    )
  )
  (defun cypher.math.pow (base exponent)
    (@cypher.math.pow base exponent))

  ;; Binary operators with other objects.

  (defun-inline @cypher.math.mul-frac (var frac)
    ;; Multiply a number by a fraction.
    ;
    ; Args:
    ;   var: The number.
    ;   frac: A `Frac` object.
    ;
    ; Returns:
    ;   An integer, the result of the multiplication.

    (@cypher.math.div
      (*
        var
        (@cypher.fracmath.Frac.get-numerator frac)
      )
      (@cypher.fracmath.Frac.get-denominator frac)
    )
  )
  (defun cypher.math.mul-frac (var frac)
    (@cypher.math.mul-frac var frac))

  ;; List reduction operators.

  ; min

  (defun-inline --@cypher.math.min-two (var1 var2)
    ;; Find the minimum value between two integers.
    ;
    ; Args:
    ;   var1: An integer.
    ;   var2: An integer.
    ;
    ; Returns:
    ;   An integer, the minimum value in the list.

    (if (> var1 var2) var2 var1)
  )
  (defun --cypher.math.min-two (var1 var2)
    (--@cypher.math.min-two var1 var2))

  (defmacro @cypher.math.min args
    ;; Find the minimum value in an integer list, macro form.
    ;
    ; Args:
    ;   args: A list of integers.
    ;
    ; Returns:
    ;   An integer, the minimum value in the list.

    (if (r args)
      (qq
        (--@cypher.math.min-two
          (unquote (f args))
          (@cypher.math.min . (unquote (r args)))
        )
      )
      (f args)
    )
  )
  (defun cypher.math.min (args)
    ;; Find the minimum value in an integer list, function form.
    ;
    ; Args:
    ;   args: A list of integers.
    ;
    ; Returns:
    ;   An integer, the minimum value in the list.

    (if (r args)
      (--cypher.math.min-two
        (f args) (cypher.math.min (r args))
      )
      (f args)
    )
  )

  ; max

  (defun-inline --@cypher.math.max-two (var1 var2)
    ;; Find the maximum value between two integers.
    ;
    ; Args:
    ;   var1: An integer.
    ;   var2: An integer.
    ;
    ; Returns:
    ;   An integer, the maximum value in the list.

    (if (> var1 var2) var1 var2)
  )
  (defun --cypher.math.max-two (var1 var2)
    (--@cypher.math.max-two var1 var2))

  (defmacro @cypher.math.max args
    ;; Find the maximum value in an integer list, macro form.
    ;
    ; Args:
    ;   args: A list of integers.
    ;
    ; Returns:
    ;   An integer, the maximum value in the list.

    (if (r args)
      (qq
        (--@cypher.math.max-two
          (unquote (f args))
          (@cypher.math.max . (unquote (r args)))
        )
      )
      (f args)
    )
  )
  (defun cypher.math.max (args)
    ;; Find the maximum value in an integer list, function form.
    ;
    ; Args:
    ;   args: A list of integers.
    ;
    ; Returns:
    ;   An integer, the maximum value in the list.

    (if (r args)
      (--cypher.math.max-two
        (f args) (cypher.math.max (r args))
      )
      (f args)
    )
  )

  ; sum

  (defun-inline @cypher.math.sum args
    ;; Find the sum of a list of integers, macro form.
    ;
    ; Args:
    ;   args: A list of integers.
    ;
    ; Returns:
    ;   An integer, the sum of the list.

    (+ . args)
  )

  (defun cypher.math.sum (args)
    ;; Find the sum of a list of integers, function form.
    ;
    ; Args:
    ;   args: A list of integers.
    ;
    ; Returns:
    ;   An integer, the sum of the list.

    (if args
      (+ (f args) (cypher.math.sum (r args)))
      0
    )
  )

  ; prod

  (defun-inline @cypher.math.prod args
    ;; Find the product of a list of integers, macro form.
    ;
    ; Args:
    ;   args: A list of integers.
    ;
    ; Returns:
    ;   An integer, the product of the list.

    (* . args)
  )

  (defun cypher.math.prod (args)
    ;; Find the product of a list of integers, function form.
    ;
    ; Args:
    ;   args: A list of integers.
    ;
    ; Returns:
    ;   An integer, the product of the list.

    (if args
      (* (f args) (cypher.math.prod (r args)))
      1
    )
  )


  ;; Exports

  (defmacro @cf.math.abs args
    (c @cypher.math.abs args))
  (defmacro cf.math.abs args
    (c cypher.math.abs args))
  (defmacro @cf.math.neg args
    (c @cypher.math.neg args))
  (defmacro cf.math.neg args
    (c cypher.math.neg args))
  (defmacro @cf.math.round-down-to-even args
    (c @cypher.math.round-down-to-even args))
  (defmacro cf.math.round-down-to-even args
    (c cypher.math.round-down-to-even args))
  (defmacro @cf.math.round-down-to-odd args
    (c @cypher.math.round-down-to-odd args))
  (defmacro cf.math.round-down-to-odd args
    (c cypher.math.round-down-to-odd args))
  (defmacro @cf.math.round-up-to-even args
    (c @cypher.math.round-up-to-even args))
  (defmacro cf.math.round-up-to-even args
    (c cypher.math.round-up-to-even args))
  (defmacro @cf.math.round-up-to-odd args
    (c @cypher.math.round-up-to-odd args))
  (defmacro cf.math.round-up-to-odd args
    (c cypher.math.round-up-to-odd args))
  (defmacro @cf.math.sqrt args
    (c @cypher.math.sqrt args))
  (defmacro cf.math.sqrt args
    (c cypher.math.sqrt args))
  (defmacro @cf.math.str args
    (c @cypher.math.str args))
  (defmacro cf.math.str args
    (c cypher.math.str args))

  (defmacro @cf.math.gt args
    (c @cypher.math.gt args))
  (defmacro cf.math.gt args
    (c cypher.math.gt args))
  (defmacro @cf.math.ge args
    (c @cypher.math.ge args))
  (defmacro cf.math.ge args
    (c cypher.math.ge args))
  (defmacro @cf.math.lt args
    (c @cypher.math.lt args))
  (defmacro cf.math.lt args
    (c cypher.math.lt args))
  (defmacro @cf.math.le args
    (c @cypher.math.le args))
  (defmacro cf.math.le args
    (c cypher.math.le args))
  (defmacro @cf.math.eq args
    (c @cypher.math.eq args))
  (defmacro cf.math.eq args
    (c cypher.math.eq args))
  (defmacro @cf.math.ne args
    (c @cypher.math.ne args))
  (defmacro cf.math.ne args
    (c cypher.math.ne args))

  (defmacro @cf.math.add args
    (c @cypher.math.add args))
  (defmacro cf.math.add args
    (c cypher.math.add args))
  (defmacro @cf.math.sub args
    (c @cypher.math.sub args))
  (defmacro @cf.math.unsigned-sub args
    (c @cypher.math.unsigned-sub args))
  (defmacro cf.math.unsigned-sub args
    (c cypher.math.unsigned-sub args))
  (defmacro @cf.math.div@unsafe args
    (c @cypher.math.div@unsafe args))
  (defmacro cf.math.div@unsafe args
    (c cypher.math.div@unsafe args))
  (defmacro @cf.math.div args
    (c @cypher.math.div args))
  (defmacro cf.math.div args
    (c cypher.math.div args))
  (defmacro @cf.math.pow args
    (c @cypher.math.pow args))
  (defmacro cf.math.pow args
    (c cypher.math.pow args))
  (defmacro @cf.math.mul-frac args
    (c @cypher.math.mul-frac args))
  (defmacro cf.math.mul-frac args
    (c cypher.math.mul-frac args))

  (defmacro @cf.math.min args
    (c @cypher.math.min args))
  (defmacro cf.math.min args
    (c cypher.math.min args))
  (defmacro @cf.math.max args
    (c @cypher.math.max args))
  (defmacro cf.math.max args
    (c cypher.math.max args))
  (defmacro @cf.math.sum args
    (c @cypher.math.sum args))
  (defmacro cf.math.sum args
    (c cypher.math.sum args))
  (defmacro @cf.math.prod args
    (c @cypher.math.prod args))
  (defmacro cf.math.prod args
    (c cypher.math.prod args))
)
