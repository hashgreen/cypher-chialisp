(
  ;; Unsigned subtraction.
  ;
  ; This function makes sure the result is at least zero.

  (defun-inline %cypher.math.unsigned-sub (minuend subtrahend)
    (if (> subtrahend minuend) (x) (- minuend subtrahend)))
  (defun cypher.math.unsigned-sub (minuend subtrahend)
    (%cypher.math.unsigned-sub minuend subtrahend))

  ;; Rounding to even or odd.

  (defun-inline %cypher.math.round-down-to-even (var)
    (if (logand var 1) (- var 1) var))
  (defun cypher.math.round-down-to-even (var)
    (%cypher.math.round-down-to-even var))

  (defun-inline %cypher.math.round-down-to-odd (var)
    (if (logand var 1) var (- var 1)))
  (defun cypher.math.round-down-to-odd (var)
    (%cypher.math.round-down-to-odd var))

  (defun-inline %cypher.math.round-up-to-even (var)
    (if (logand var 1) (+ var 1) var))
  (defun cypher.math.round-up-to-even (var)
    (%cypher.math.round-up-to-even var))

  (defun-inline %cypher.math.round-up-to-odd (var)
    (if (logand var 1) var (+ var 1)))
  (defun cypher.math.round-up-to-odd (var)
    (%cypher.math.round-up-to-odd var))

  ;; Division.
  ;
  ; The vanilla `/` operator has some unintended behavior, so we fall back to
  ; `divmod` operator.

  (defun-inline %cypher.math.div (numer denom)
    (f (divmod numer denom)))
  (defun cypher.math.div (numer denom)
    (%cypher.math.div numer denom))

  ;; Absolute value.

  (defun-inline %cypher.math.abs (var)
    (if (> var 0) var (- 0 var))
  )
  (defun cypher.math.abs (var)
    (%cypher.math.abs var))

  ;; Multiply var by fraction (numer / denom).

  (defun-inline %cypher.math.mul-frac (var frac)
    (%cypher.math.div
      (*
        var
        (%cypher.fracmath.Frac.get-numerator frac)
      )
      (%cypher.fracmath.Frac.get-denominator frac)
    )
  )
  (defun cypher.math.mul-frac (var frac)
    (%cypher.math.mul-frac var frac))

  ;; Square root.

  (defun --cypher.math.sqrt-loop-babylonian (var var1 var2)
    ;; Babylonian method for square root.
    ;
    ; See https://solidity-by-example.org/library/.

    (if (> var1 var2)
      (--cypher.math.sqrt-loop-babylonian
        var
        var2
        (ash (+ (%cypher.math.div var var2) var2) -1)
      )
      var1
    )
  )

  (defun-inline %cypher.math.sqrt (var)
    (@cypher.macros.switch
      (
        (> var 3) .
        (--cypher.math.sqrt-loop-babylonian
          var
          var
          (+ (ash var -1) 1))
      )
      ((> var 0) . 1)
      ((= var 0) . 0)
      (x)
    )
  )
  (defun cypher.math.sqrt (var)
    (%cypher.math.sqrt var))

  (defun --cypher.math.pow (base exponent)
    (if (> exponent 0)
      (* base (--cypher.math.pow base (- exponent 1)))
      1
    )
  )
  (defun-inline %cypher.math.pow (base exponent)
    (@cypher.macros.assert
      (not (> 0 exponent))
      (--cypher.math.pow base exponent)
    )
  )
  (defun cypher.math.pow (base exponent)
    (%cypher.math.pow base exponent))

  (defun --cypher.math.str (var decimals)
    ;; Convert var to string.
    ;
    ; Args:
    ;   var: integer to convert.
    ;   decimals: decimal places. -1 to disable printing decimal point.
    ;
    ; Returns:
    ;   The string representation of `var`.

    (if
      (any (> var 0) (> decimals 0) (= decimals 0))
      (concat
        (--cypher.math.str
          (%cypher.math.div var 10)
          (- decimals 1)
        )
        (+ 48 (r (divmod var 10)))
        (if (= decimals 0) "." "")
      )
      ""
    )
  )
  (defun-inline %cypher.math.str (var decimals)
    (concat
      (if (> var 0) "" "-")
      (--cypher.math.str (%cypher.math.abs var) decimals)
    )
  )
  (defun cypher.math.str (var decimals)
    (%cypher.math.str var decimals))

  ;; Exports

  (defmacro %cf.unsigned-sub args (c %cypher.math.unsigned-sub args))
  (defmacro cf.unsigned-sub args (c cypher.math.unsigned-sub args))
  (defmacro %cf.round-down-to-even args (c %cypher.math.round-down-to-even args))
  (defmacro cf.round-down-to-even args (c cypher.math.round-down-to-even args))
  (defmacro %cf.round-down-to-odd args (c %cypher.math.round-down-to-odd args))
  (defmacro cf.round-down-to-odd args (c cypher.math.round-down-to-odd args))
  (defmacro %cf.round-up-to-even args (c %cypher.math.round-up-to-even args))
  (defmacro cf.round-up-to-even args (c cypher.math.round-up-to-even args))
  (defmacro %cf.round-up-to-odd args (c %cypher.math.round-up-to-odd args))
  (defmacro cf.round-up-to-odd args (c cypher.math.round-up-to-odd args))
  (defmacro %cf.div args (c %cypher.math.div args))
  (defmacro cf.div args (c cypher.math.div args))
  (defmacro %cf.abs args (c %cypher.math.abs args))
  (defmacro cf.abs args (c cypher.math.abs args))
  (defmacro %cf.mul-frac args (c %cypher.math.mul-frac args))
  (defmacro cf.mul-frac args (c cypher.math.mul-frac args))
  (defmacro %cf.sqrt args (c %cypher.math.sqrt args))
  (defmacro cf.sqrt args (c cypher.math.sqrt args))
  (defmacro %cf.pow args (c %cypher.math.pow args))
  (defmacro cf.pow args (c cypher.math.pow args))
  (defmacro %cf.str args (c %cypher.math.str args))
  (defmacro cf.str args (c cypher.math.str args))
)
