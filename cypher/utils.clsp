;;; Utilities.
;
; This file contains a collection of useful utils.
;
; TODO: add the following functions:
;   - match
;   - len (or count?)

(
  ;; function

  (defun-inline --cypher.utils.is-printable-char (char)
    ;; Whether a character is printable.
    ;
    ; Args:
    ;   char: a character.
    ;
    ; Returns:
    ;   Boolean, whether the character is printable.

    (all (> char 31) (> 128 char))
  )

  (defun --cypher.utils.is-printable-str.stager (str)
    (if str
      (all
        (--cypher.utils.is-printable-str (/ str 256))
        (--cypher.utils.is-printable-char (r (divmod str 256)))
      )
      1
    )
  )
  (defun --cypher.utils.is-printable-str (str)
    ;; Whether a string is printable.
    ;
    ; Args:
    ;   str: a string.
    ;
    ; Returns:
    ;   Boolean, whether the string is printable.

    (if (l str) 0 (--cypher.utils.is-printable-str.stager str))
  )

  (defun-inline --@cypher.utils.apply (fn args is_lambda)
    ;; Apply a fntion to a list of arguments.
    ;
    ; Args:
    ;   fn: a concrete function.
    ;   args: a list of arguments.
    ;   is_lambda: whether `fn` is a lambda.
    ;
    ; Returns:
    ;   The result of applying `fn` to `args`.

    (a fn (if is_lambda args (c fn args)))
  )

  ;; control flow

  (defmacro @cypher.utils.assert args
    ;; Assert a series of statements.
    ;
    ; Args:
    ;   args: list of statements to assert with the last being the value to return.
    ;
    ; Returns:
    ;   The last statement.

    (if (r args)
      (qq
        (if (unquote (f args))
          (@cypher.utils.assert . (unquote (r args)))
          (x)
        )
      )
      (f args)
    )
  )

  (defmacro @cypher.utils.assert@debug args
    ;; Assert a series of statements with debug info.
    ;
    ; Args:
    ;   args: list of statements to assert with the last being the value to return.
    ;
    ; Returns:
    ;   The last statement.

    (if (r args)
      (qq
        (if (unquote (f args))
          (@cypher.utils.assert . (unquote (r args)))
          (x
            "@cypher.utils.assert failed: "
            (q . (unquote (f args)))
            "evaluates to false, leaving assertion body"
            (q . (unquote (r args)))
          )
        )
      )
      (f args)
    )
  )

  (defmacro @cypher.utils.if args
    ;; Continued if.
    ;
    ; The usage of this macro is: `(if cond1 stmt1 cond2 stmt2 ... default)`.
    ;
    ; Args:
    ;   args: list of interleaved conditions and corresponding statements, with the
    ;     last statement being the default.
    ;
    ; Returns:
    ;   The statement corresponding to the first true condition, or the default if none is true.

    (if (r args)
      (qq
        (if (unquote (f args))
          (unquote (f (r args)))
          (@cypher.utils.if . (unquote (r (r args))))
        )
      )
      (f args)
    )
  )

  (defmacro --@cypher.utils.if@debug args
    ;; Continued if with debug info.
    ;
    ; The usage of this macro is: `(if cond1 stmt1 cond2 stmt2 ... default)`.
    ;
    ; Args:
    ;   args: list of interleaved conditions and corresponding statements, with the
    ;     last statement being the default.
    ;
    ; Returns:
    ;   The statement corresponding to the first true condition, or the default if none is true.

    (if (r args)
      (if (r (r args))
        (qq
          (if (unquote (f args))
            (unquote (f (r args)))
            (--@cypher.utils.if@debug . (unquote (r (r args))))
          )
        )
        (x "@cypher.utils.if: no default statement provided.")
      )
      (f args)
    )
  )
  (defmacro @cypher.utils.if@debug args
    (if args
      (c --@cypher.utils.if@debug args)
      (x "@cypher.utils.if: no arguments provided.")
    )
  )

  ;; comparison

  (defmacro --@cypher.utils.and args
    ;; Lazy evaluation of `all`.
    ;
    ; Args:
    ;   args: list of statements to evaluate.
    ;
    ; Returns:
    ;   1 if all statements evaluate to true, 0 otherwise.

    (if (r args)
      (qq
        (if (unquote (f args))
          (--@cypher.utils.and . (unquote (r args)))
          0
        )
      )
      (f args)
    )
  )
  (defmacro @cypher.utils.and args
    ; This gets around the case of lone `@cypher.utils.and` with no args.
    (if args
      (c --@cypher.utils.and args)
      1
    )
  )

  (defmacro @cypher.utils.min (comp_fn . args)
    ;; Find the minimum value in a list, macro form.
    ;
    ; Args:
    ;   comp_fn: comparison function that takes two arguments, and when
    ;     - (comp_fn left right) < 0, left shuold be smaller than right,
    ;     - (comp_fn left right) > 0, left shuold be larger than right, and
    ;     - (comp_fn left right) = 0, left and right are equal.
    ;   args: list of arguments to find minimum value.
    ;
    ; Returns:
    ;   The minimum value.

    ; TODO: this does not work with `comp_fn` in fuction symbol yet

    (qq
      (--@cypher.itertools.reduce
        (lambda (left right comp_fn)
          (if
            (>
              0
              (--@cypher.utils.apply comp_fn (list left right) (unquote is_lambda))
            )
            left
            right
          )
        )
        (unquote args)
        (unquote (f args))
        ; `comp_fn` is passed in the context
        (list (unquote comp_fn))
        (unquote (l comp_fn))
      )
    )
  )

  ; TODO: min, function form

  ;; list

  (defmacro @cypher.utils.prelist args
    ;; Construct a prepending list.
    ;
    ; Note that this is different from `list` as there is not a `()` in the end.
    ;   This function is particularly useful when concatenating atoms to an existing list.
    ;
    ; Args:
    ;  args: list of statements to prepend, with the last statement being the list to prepend to.
    ;
    ; Returns:
    ;   The prepending list.
    ;

    (if (r args)
      (qq
        (c
          (unquote (f args))
          (@cypher.utils.prelist . (unquote (r args)))
        )
      )
      (f args)
    )
  )

  ;; Exports

  (defmacro @cf.assert args
    (c @cypher.utils.assert args))
  (defmacro @cf.assert@debug args
    (c @cypher.utils.assert@debug args))
  (defmacro @cf.if args
    (c @cypher.utils.if args))
  (defmacro @cf.if@debug args
    (c @cypher.utils.if@debug args))

  (defmacro @cf.and args
    (c @cypher.utils.and args))
  (defmacro @cf.min args
    (c @cypher.utils.min args))

  (defmacro @cf.prelist args
    (c @cypher.utils.prelist args))
)
