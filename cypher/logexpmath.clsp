;;; Logarithm and Exponentiation Math
;
; See: https://github.com/balancer/balancer-v2-monorepo/blob/db24e8372ac7fa51e5db65bfa961697382f68337/pkg/solidity-utils/contracts/math/LogExpMath.sol

(
  ;; Constants

  (defconstant cypher.logexpmath.constants.FRAC_64 64)
  (defconstant cypher.logexpmath.constants.FRAC_72 72)
  (defconstant cypher.logexpmath.constants.FRAC_128 128)

  (defconstant cypher.logexpmath.constants.LN_72_A7  ; exp(2 ** 7)
    183591838716394507441929582827196479720296077407287175546725255668661662036302)
  (defconstant cypher.logexpmath.constants.LN_72_A6  ; exp(2 ** 6)
    29444659034920256478884744064437645965741631810494)
  (defconstant cypher.logexpmath.constants.LN_72_A5  ; exp(2 ** 5)
    372892036554861672118798300772074960)
  (defconstant cypher.logexpmath.constants.LN_72_A4  ; exp(2 ** 4)
    41963470485121714839508006980)
  (defconstant cypher.logexpmath.constants.LN_72_A3  ; exp(2 ** 3)
    14077176084848423785660528)
  (defconstant cypher.logexpmath.constants.LN_72_A2  ; exp(2 ** 2)
    257832473743208563546842)
  (defconstant cypher.logexpmath.constants.LN_72_A1  ; exp(2 ** 1)
    34893830861633635945704)
  (defconstant cypher.logexpmath.constants.LN_72_A0  ; exp(2 ** 0)
    12836722997708609710783)
  (defconstant cypher.logexpmath.constants.LN_72_AN1  ; exp(2 ** -1)
    7785866068348536395565)
  (defconstant cypher.logexpmath.constants.LN_72_AN2  ; exp(2 ** -2)
    6063638590918920402555)
  (defconstant cypher.logexpmath.constants.LN_72_AN3  ; exp(2 ** -3)
    5351142274878367833325)
  (defconstant cypher.logexpmath.constants.LN_72_AN4  ; exp(2 ** -4)
    5026932953994157872561)

  (defconstant cypher.logexpmath.constants.LN_72_EXPONENT_UPPER_BOUND
    2417556491324078996586496)

  (defun-inline cypher.logexpmath.constants.USE_LN_128_UPPER_BOUND ()
    (%cypher.fracmath.Frac@unsafe 11 10))
  (defun-inline cypher.logexpmath.constants.USE_LN_128_LOWER_BOUND ()
    (%cypher.fracmath.Frac@unsafe 9 10))

  ;; Utilities

  (defun --cypher.logexpmath.ln-maclaurin.do
    (up_af uu_af logarithm_int taylor_coeffs)

    (if taylor_coeffs
      (--cypher.logexpmath.ln-maclaurin.do
        (--%cypher.fracmath.AshFrac.mul@imprecise up_af uu_af)
        uu_af
        (+
          logarithm_int
          (%cypher.math.div
            (%cypher.fracmath.AshFrac.get-numerator up_af)
            (f taylor_coeffs)
          )
        )
        (r taylor_coeffs)
      )
      logarithm_int
    )
  )

  (defun --cypher.logexpmath.ln-maclaurin.stager
    (u_af logarithm_int taylor_coeffs)

    (ash
      (--cypher.logexpmath.ln-maclaurin.do
        u_af
        (--%cypher.fracmath.AshFrac.square@imprecise u_af)
        logarithm_int
        taylor_coeffs
      )
      1
    )
  )

  (defun --cypher.logexpmath.ln-maclaurin
    (var_af taylor_coeffs)

    (--cypher.logexpmath.ln-maclaurin.stager
      (%cypher.fracmath.AshFrac.div
        (%cypher.fracmath.AshFrac.sub-int var_af 1)
        (%cypher.fracmath.AshFrac.add-int var_af 1)
      )
      0
      taylor_coeffs
    )
  )

  (defun-inline --%cypher.logexpmath.ln-72-maclaurin (var_af72)
    (--cypher.logexpmath.ln-maclaurin
      var_af72
      (list 1 3 5 7 9 11 13)
    )
  )

  (defun-inline --%cypher.logexpmath.ln-128-maclaurin (var_af128)
    (--cypher.logexpmath.ln-maclaurin
      var_af128
      (list 1 3 5 7 9 11 13 15)
    )
  )

  (defun --cypher.logexpmath.ln-72.do
    (var_af72 logarithm_int precalcs)

    (if precalcs
      (if
        (>
          (r (f precalcs))
          (%cypher.fracmath.AshFrac.get-numerator var_af72)
        )
        (--cypher.logexpmath.ln-72.do
          var_af72
          logarithm_int
          (r precalcs)
        )
        (--cypher.logexpmath.ln-72.do
          (%cypher.fracmath.AshFrac.div
            var_af72
            (%cypher.fracmath.AshFrac
              (r (f precalcs))
              cypher.logexpmath.constants.FRAC_72
            )
          )
          (+
            logarithm_int
            (ash
              1
              (+ cypher.logexpmath.constants.FRAC_72 (f (f precalcs)))
            )
          )
          (r precalcs)
        )
      )
      (@cypher.macros.assert
        (>
          cypher.logexpmath.constants.LN_72_EXPONENT_UPPER_BOUND
          logarithm_int
        )
        (+ logarithm_int (--%cypher.logexpmath.ln-72-maclaurin var_af72))
      )
    )
  )

  (defun-inline --cypher.logexpmath.ln-72.stager (var_f)
    (--cypher.logexpmath.ln-72.do
      (%cypher.fracmath.AshFrac.from-frac
        var_f
        cypher.logexpmath.constants.FRAC_72
      )
      0
      (list
        (c 7 cypher.logexpmath.constants.LN_72_A7)
        (c 6 cypher.logexpmath.constants.LN_72_A6)
        (c 5 cypher.logexpmath.constants.LN_72_A5)
        (c 4 cypher.logexpmath.constants.LN_72_A4)
        (c 3 cypher.logexpmath.constants.LN_72_A3)
        (c 2 cypher.logexpmath.constants.LN_72_A2)
        (c 1 cypher.logexpmath.constants.LN_72_A1)
        (c 0 cypher.logexpmath.constants.LN_72_A0)
        (c -1 cypher.logexpmath.constants.LN_72_AN1)
        (c -2 cypher.logexpmath.constants.LN_72_AN2)
        (c -3 cypher.logexpmath.constants.LN_72_AN3)
        (c -4 cypher.logexpmath.constants.LN_72_AN4)
      )
    )
  )

  (defun --cypher.logexpmath.ln-72 (var_f)
    ;; Logarithm as 72-bit fractions.
    ;
    ; Args:
    ;   var_f: a `Frac` fraction.
    ;
    ; Returns:
    ;   Logarithm of `var_f` as a 72-bit `AshFrac` fraction.

    (%cypher.fracmath.AshFrac
      (if (%cypher.fracmath.Frac.gt-one var_f)
        (--cypher.logexpmath.ln-72.stager var_f)
        (-
          0
          (--cypher.logexpmath.ln-72.stager
            (%cypher.fracmath.Frac.inv var_f)
          )
        )
      )
      cypher.logexpmath.constants.FRAC_72
    )
  )

  (defun --cypher.logexpmath.ln-128 (var_f)
    ;; Logarithm as 128-bit fractions.
    ;
    ; Args:
    ;   var_f: a `Frac` fraction.
    ;
    ; Returns:
    ;   Logarithm of `var_f` as a 128-bit `AshFrac` fraction.

    (%cypher.fracmath.AshFrac
      (--%cypher.logexpmath.ln-128-maclaurin
        (%cypher.fracmath.AshFrac.from-frac
          var_f
          cypher.logexpmath.constants.FRAC_128
        )
      )
      cypher.logexpmath.constants.FRAC_128
    )
  )

  (defun-inline --cypher.logexpmath.use-ln-128 (var_f)
    ;; Whether to use 128-bit logarithm.
    ;
    ; Args:
    ;   var_f: a `Frac` fraction.
    ;
    ; Returns:
    ;   Boolean, whether to use 128-bit logarithm.

    (@cypher.macros.and
      (%cypher.fracmath.Frac.gt
        (cypher.logexpmath.constants.USE_LN_128_UPPER_BOUND)
        var_f
      )
      (%cypher.fracmath.Frac.gt
        var_f
        (cypher.logexpmath.constants.USE_LN_128_LOWER_BOUND)
      )
    )
  )

  (defun --cypher.logexpmath.ln-to-af72 (var_f)
    (if (--cypher.logexpmath.use-ln-128 var_f)
      (%cypher.fracmath.AshFrac.from-ash-frac
        (--cypher.logexpmath.ln-128 var_f)
        cypher.logexpmath.constants.FRAC_72
      )
      (--cypher.logexpmath.ln-72 var_f)
    )
  )

  (defun --cypher.logexpmath.ln-to-af128 (var_f)
    (if (--cypher.logexpmath.use-ln-128 var_f)
      (--cypher.logexpmath.ln-128 var_f)
      (%cypher.fracmath.AshFrac.from-ash-frac
        (--cypher.logexpmath.ln-72 var_f)
        cypher.logexpmath.constants.FRAC_128
      )
    )
  )

  ;; Logarithms.

  (defun-inline %cypher.logexpmath.ln (var_f)
    ;; Natural logarithm.
    ;
    ; Args:
    ;   var_f: a `Frac` fraction.
    ;
    ; Returns:
    ;   Natural logarithm of `var_f` as a `AshFrac` fraction.

    (@cypher.macros.assert
      (%cypher.fracmath.Frac.gt-zero var_f)

      ; Use `defun` form due to complex return value
      (cypher.fracmath.AshFrac.from-ash-frac
        (--cypher.logexpmath.ln-to-af72 var_f)
        cypher.logexpmath.constants.FRAC_64
      )
    )
  )
  (defun cypher.logexpmath.ln (var_f)
    (%cypher.logexpmath.ln var_f))

  (defun-inline %cypher.logexpmath.log (var_f base_f)
    ;; Logarithm with base.
    ;
    ; Args:
    ;   var_f: a `Frac` fraction.
    ;   base_f: a `Frac` fraction.
    ;
    ; Returns:
    ;   Logarithm of `var_f` with base `base_f` as a `AshFrac` fraction.

    (@cypher.macros.assert
      (%cypher.fracmath.Frac.gt-zero var_f)
      (%cypher.fracmath.Frac.gt-zero base_f)

      ; Use `defun` form due to complex return value
      (cypher.fracmath.AshFrac.from-ash-frac
        (cypher.fracmath.AshFrac.div
          (--cypher.logexpmath.ln-to-af128 var_f)
          (--cypher.logexpmath.ln-to-af128 base_f)
        )
        cypher.logexpmath.constants.FRAC_64
      )
    )
  )
  (defun cypher.logexpmath.log (var_f base_f)
    (%cypher.logexpmath.log var_f base_f))

  ;; Exports

  (defmacro %cf.ln args
    (c %cypher.logexpmath.ln args))
  (defmacro cf.ln args
    (c cypher.logexpmath.ln args))
  (defmacro %cf.log args
    (c %cypher.logexpmath.log args))
  (defmacro cf.log args
    (c cypher.logexpmath.log args))
)
