(
  ;; Fractions.

;; maybe an "unsafe" & shorter version of this which assumes `denom` > 0?
;; there is a differentiation, in general between "trusted" and "untrusted" data
;; (Never mind, I see you've done this.)
;; also, I wonder if negative denominator is okay (obviously zero isn't). I'll keep
;; this question in mind as I read.

  (defun-inline %cypher.fracmath.Frac (numer denom)
    ;; Fraction representation.
    ;
    ; This structure is essentially (numer / denom) in value.
    ; We assert the denominator to be greater than zero to avoid surprises in some
    ; comparisons.

    (@cypher.macros.assert
      (> denom 0)
      (c numer denom)
    )
  )
  (defun cypher.fracmath.Frac (numer denom)
    (%cypher.fracmath.Frac numer denom))

  (defun-inline %cypher.fracmath.Frac@unsafe (numer denom)
    ;; Fraction representation, does not check demoninator.

    (c numer denom)
  )
  (defun cypher.fracmath.Frac@unsafe (numer denom)
    (%cypher.fracmath.Frac@unsafe numer denom))

  ;; Factory functions.

  (defun-inline %cypher.fracmath.Frac.from-frac (frac denom)
    ;; Convert from a normal fraction.

    (%cypher.fracmath.Frac
      (%cypher.math.div
        (*
          (%cypher.fracmath.Frac.get-numerator frac)
          denom
        )
        (%cypher.fracmath.Frac.get-denominator frac)
      )
      denom
    )
  )
  (defun cypher.fracmath.Frac.from-frac (frac denom)
    (%cypher.fracmath.Frac.from-frac frac denom))

  (defun-inline %cypher.fracmath.Frac.from-ash-frac (ash_frac denom)
    ;; Convert from an ash fraction.

    (%cypher.fracmath.Frac
      (ash
        (*
          (%cypher.fracmath.AshFrac.get-numerator ash_frac)
          denom
        )
        (- 0 (%cypher.fracmath.AshFrac.get-denominator-ash ash_frac))
      )
      denom
    )
  )
  (defun cypher.fracmath.Frac.from-ash-frac (ash_frac denom)
    (cypher.fracmath.Frac.from-ash-frac ash_frac denom))

  ;; Getter functions.

  (defun-inline %cypher.fracmath.Frac.get-numerator (frac)
    (f frac))
  (defun cypher.fracmath.Frac.get-numerator (frac)
    (%cypher.fracmath.Frac.get-numerator frac))

  (defun-inline %cypher.fracmath.Frac.get-denominator (frac)
    (r frac))
  (defun cypher.fracmath.Frac.get-denominator (frac)
    (%cypher.fracmath.Frac.get-denominator frac))

  ;; Unary arithmetic functions.

  (defun-inline %cypher.fracmath.Frac.gt-zero (frac)
    ;; `Greater than` against zero.

    (>
      (%cypher.fracmath.Frac.get-numerator frac)
      0
    )
  )
  (defun cypher.fracmath.Frac.gt-zero (frac)
    (%cypher.fracmath.Frac.gt-zero frac))

  (defun-inline %cypher.fracmath.Frac.gt-one (frac)
    ;; `Greater than` against one.

    (>
      (%cypher.fracmath.Frac.get-numerator frac)
      (%cypher.fracmath.Frac.get-denominator frac)
    )
  )
  (defun cypher.fracmath.Frac.gt-one (frac var)
    (%cypher.fracmath.Frac.gt-one frac var))

  (defun-inline %cypher.fracmath.Frac.abs (frac)
    ;; Absolute value.

    (%cypher.fracmath.Frac@unsafe
      (%cypher.math.abs (%cypher.fracmath.Frac.get-denominator frac))
      (%cypher.fracmath.Frac.get-numerator frac)
    )
  )
  (defun cypher.fracmath.Frac.abs (frac)
    (%cypher.fracmath.Frac.abs frac))

  (defun-inline %cypher.fracmath.Frac.inv (frac)
    ;; Numerical inversion.
    ;
    ; Note this inversion produces a fraction of the same denominator.

    (%cypher.fracmath.Frac@unsafe
      (%cypher.math.div
        (*
          (%cypher.fracmath.Frac.get-denominator frac)
          (%cypher.fracmath.Frac.get-denominator frac))
        (%cypher.fracmath.Frac.get-numerator frac)
      )
      (%cypher.fracmath.Frac.get-denominator frac)
    )
  )
  (defun cypher.fracmath.Frac.inv (frac)
    (%cypher.fracmath.Frac.inv frac))

  ;; Binary arithmetic functions.

  (defun-inline %cypher.fracmath.Frac.eq (frac other)
    ;; `Equal to` against another `Frac`.

    (@cypher.macros.and
      (=
        (%cypher.fracmath.Frac.get-numerator frac)
        (%cypher.fracmath.Frac.get-numerator other)
      )
      (=
        (%cypher.fracmath.Frac.get-denominator frac)
        (%cypher.fracmath.Frac.get-denominator other)
      )
    )
  )
  (defun cypher.fracmath.Frac.eq (frac other)
    (%cypher.fracmath.Frac.eq frac other))

  (defun-inline %cypher.fracmath.Frac.gt-int (frac var)
    ;; `Greater than` against an integer.

    (>
      (%cypher.fracmath.Frac.get-numerator frac)
      (* var (%cypher.fracmath.Frac.get-denominator frac))
    )
  )
  (defun cypher.fracmath.Frac.gt-int (frac var)
    (%cypher.fracmath.Frac.gt-int frac var))

  (defun-inline %cypher.fracmath.Frac.gt (frac other)
    ;; `Greater than` against an `Frac`.

    (>
      (*
        (%cypher.fracmath.Frac.get-numerator frac)
        (%cypher.fracmath.Frac.get-denominator other)
      )
      (*
        (%cypher.fracmath.Frac.get-numerator other)
        (%cypher.fracmath.Frac.get-denominator frac)
      )
    )
  )
  (defun cypher.fracmath.Frac.gt (frac other)
    (%cypher.fracmath.Frac.gt frac other))

  (defun-inline %cypher.fracmath.Frac.mul (frac other)
    ;; `Multiplication` with another `Frac`.

    (%cypher.fracmath.Frac@unsafe
      (%cypher.math.div
        (*
          (%cypher.fracmath.Frac.get-numerator frac)
          (%cypher.fracmath.Frac.get-numerator other)
        )
        (%cypher.fracmath.Frac.get-denominator other)
      )
      (%cypher.fracmath.Frac.get-denominator frac)
    )
  )
  (defun cypher.fracmath.Frac.mul (frac other)
    (%cypher.fracmath.Frac.mul frac other))

  (defun-inline %cypher.fracmath.Frac.mul@precise (frac other)
    ;; `Multiplication` with another `Frac`.

    (%cypher.fracmath.Frac@unsafe
      (*
        (%cypher.fracmath.Frac.get-numerator frac)
        (%cypher.fracmath.Frac.get-numerator other)
      )
      (*
        (%cypher.fracmath.Frac.get-denominator frac)
        (%cypher.fracmath.Frac.get-denominator other)
      )
    )
  )
  (defun cypher.fracmath.Frac.mul@precise (frac other)
    (%cypher.fracmath.Frac.mul@precise frac other))

  ;; Fractions with arithmetic bit-shifting ("ash fractions").

  (defun-inline %cypher.fracmath.AshFrac (numer denom_ash)
    ;; Bit-shifted fraction representation.
    ;
    ; This represent (numer / 2^denom_ash) in value.

    (@cypher.macros.assert
      (> denom_ash 0)
      (c numer denom_ash)
    )
  )
  (defun cypher.fracmath.AshFrac (numer denom_ash)
    (%cypher.fracmath.AshFrac numer denom_ash))

  (defun-inline %cypher.fracmath.AshFrac@unsafe (numer denom_ash)
    ;; Bit-shifted fraction representation, does not check demoninator.
    ;
    ; This represent (numer / 2^denom_ash) in value.

    (c numer denom_ash)
  )
  (defun cypher.fracmath.AshFrac@unsafe (numer denom_ash)
    (%cypher.fracmath.AshFrac@unsafe numer denom_ash))

  ;; Factory functions.

  (defun-inline %cypher.fracmath.AshFrac.from-frac (frac denom_ash)
    ;; Convert from a normal fraction.

    (%cypher.fracmath.AshFrac
      (%cypher.math.div
        (ash
          (%cypher.fracmath.Frac.get-numerator frac)
          denom_ash
        )
        (%cypher.fracmath.Frac.get-denominator frac)
      )
      denom_ash
    )
  )
  (defun cypher.fracmath.AshFrac.from-frac (frac denom_ash)
    (%cypher.fracmath.AshFrac.from-frac frac denom_ash))

  (defun-inline %cypher.fracmath.AshFrac.from-ash-frac (ash_frac denom_ash)
    ;; Convert from another ash fraction.

    (%cypher.fracmath.AshFrac
      (ash
        (%cypher.fracmath.AshFrac.get-numerator ash_frac)
        (- denom_ash (%cypher.fracmath.AshFrac.get-denominator-ash ash_frac))
      )
      denom_ash
    )
  )
  (defun cypher.fracmath.AshFrac.from-ash-frac (ash_frac denom_ash)
    (%cypher.fracmath.AshFrac.from-ash-frac ash_frac denom_ash))

  (defun-inline %cypher.fracmath.AshFrac.to-int (frac)
    (ash
      (%cypher.fracmath.AshFrac.get-numerator frac)
      (- 0 (%cypher.fracmath.AshFrac.get-denominator-ash frac))
    )
  )
  (defun cypher.fracmath.AshFrac.to-int (frac)
    (%cypher.fracmath.AshFrac.to-int frac))

  ;; Getter functions.

  (defun-inline %cypher.fracmath.AshFrac.get-numerator (ash_frac)
    (f ash_frac))
  (defun cypher.fracmath.AshFrac.get-numerator (ash_frac)
    (%cypher.fracmath.AshFrac.get-numerator ash_frac))

  (defun-inline %cypher.fracmath.AshFrac.get-denominator-ash (ash_frac)
    (r ash_frac))
  (defun cypher.fracmath.AshFrac.get-denominator-ash (ash_frac)
    (%cypher.fracmath.AshFrac.get-denominator-ash ash_frac))

  ;; Utility functions.

  (defun --cypher.fracmath.AshFrac.str.stager (frac decimals)
    (%cypher.math.str
      (%cypher.fracmath.AshFrac.to-int
        (%cypher.fracmath.AshFrac.mul-int
          frac
          (%cypher.math.pow 10 decimals)
        )
      )
      decimals
    )
  )

  (defun-inline %cypher.fracmath.AshFrac.str (frac)
    (concat
      "AshFrac("
      (%cypher.math.str (%cypher.fracmath.AshFrac.get-numerator frac) -1)
      ", "
      (%cypher.math.str (%cypher.fracmath.AshFrac.get-denominator-ash frac) -1)
      ") = "
      (--cypher.fracmath.AshFrac.str.stager
        frac
        (+
          1
          (%cypher.fracmath.AshFrac.to-int
            (%cypher.fracmath.AshFrac.mul-int
              ; ln(2) / ln(10) = 0.30103
              (%cypher.fracmath.AshFrac@unsafe 5553023288523357132 (q . 64))
              (%cypher.fracmath.AshFrac.get-denominator-ash frac)
            )
          )
        )
      )
    )
  )
  (defun cypher.fracmath.AshFrac.str (frac)
    (%cypher.fracmath.AshFrac.str frac))

  ;; Unary arithmetic functions.

  (defun-inline %cypher.fracmath.AshFrac.gt-one (frac)
    ;; `Greater than` against one.

    (%cypher.fracmath.AshFrac.gt-int frac 1)
  )
  (defun cypher.fracmath.AshFrac.gt-one (frac var)
    (%cypher.fracmath.AshFrac.gt-one frac var))

  (defun-inline %cypher.fracmath.AshFrac.neg (frac)
    ;; Negative value.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (- 0 (%cypher.fracmath.AshFrac.get-numerator frac))
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.neg (frac)
    (%cypher.fracmath.AshFrac.neg frac))

  (defun-inline %cypher.fracmath.AshFrac.abs (frac)
    ;; Absolute value.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (%cypher.math.abs (%cypher.fracmath.AshFrac.get-numerator frac))
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.abs (frac)
    (%cypher.fracmath.AshFrac.abs frac))

  (defun-inline %cypher.fracmath.AshFrac.inv (frac)
    ;; Inversion.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (%cypher.math.div
        (ash
          1
          (* 2 (%cypher.fracmath.AshFrac.get-denominator-ash frac)))
        (%cypher.fracmath.AshFrac.get-numerator frac)
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.inv (frac)
    (%cypher.fracmath.AshFrac.inv frac))

  (defun-inline %cypher.fracmath.AshFrac.square (frac)
    ;; Squaring.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (ash
        (*
          (%cypher.fracmath.AshFrac.get-numerator frac)
          (%cypher.fracmath.AshFrac.get-numerator frac)
        )
        (- 0 (%cypher.fracmath.AshFrac.get-denominator-ash frac))
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.square (frac)
    (%cypher.fracmath.AshFrac.square frac))

  (defun-inline %cypher.fracmath.AshFrac.square@precise (frac)
    ;; Squaring, retaining sufficient precision.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac` with a sufficiently precise `denominator_ash`.

    (%cypher.fracmath.AshFrac@unsafe
      (*
        (%cypher.fracmath.AshFrac.get-numerator frac)
        (%cypher.fracmath.AshFrac.get-numerator frac)
      )
      (ash (%cypher.fracmath.AshFrac.get-denominator-ash frac) 1)
    )
  )
  (defun cypher.fracmath.AshFrac.square@precise (frac)
    (%cypher.fracmath.AshFrac.square@precise frac))

  (defun-inline %cypher.fracmath.AshFrac.sqrt (ash_frac)
    ;; Square root.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (%cypher.math.sqrt
        (ash
          (%cypher.fracmath.AshFrac.get-numerator ash_frac)
          (%cypher.fracmath.AshFrac.get-denominator-ash ash_frac)
        )
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash ash_frac)
    )
  )
  (defun cypher.fracmath.AshFrac.sqrt (ash_frac)
    (%cypher.fracmath.AshFrac.sqrt ash_frac))

  ;; Binary arithmetic functions.

  (defun-inline %cypher.fracmath.AshFrac.gt-int (frac var)
    ;; Greater than an integer.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   var: an integer.
    ;
    ; Returns:
    ;   A boolean.

    (>
      (%cypher.fracmath.AshFrac.get-numerator frac)
      (ash var (%cypher.fracmath.AshFrac.get-denominator-ash frac))
    )
  )
  (defun cypher.fracmath.AshFrac.gt-int (frac var)
    (%cypher.fracmath.AshFrac.gt-int frac var))

  (defun-inline %cypher.fracmath.AshFrac.add-int (frac var)
    ;; Adding an integer.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   var: an integer.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (+
        (%cypher.fracmath.AshFrac.get-numerator frac)
        (ash 1 (%cypher.fracmath.AshFrac.get-denominator-ash frac))
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.add-int (frac var)
    (%cypher.fracmath.AshFrac.add-int frac var))

  (defun-inline %cypher.fracmath.AshFrac.sub-int (frac var)
    ;; Subtracting an integer.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   var: an integer.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (-
        (%cypher.fracmath.AshFrac.get-numerator frac)
        (ash 1 (%cypher.fracmath.AshFrac.get-denominator-ash frac))
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.sub-int (frac var)
    (%cypher.fracmath.AshFrac.sub-int frac var))

  (defun-inline %cypher.fracmath.AshFrac.mul-int (frac var)
    ;; Multiplying an integer.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   var: an integer.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (*
        (%cypher.fracmath.AshFrac.get-numerator frac)
        var
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.mul-int (frac var)
    (%cypher.fracmath.AshFrac.mul-int frac var))

  (defun-inline %cypher.fracmath.AshFrac.div-int (frac var)
    ;; Dividing an integer.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   var: an integer.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (%cypher.math.div
        (%cypher.fracmath.AshFrac.get-numerator frac)
        var
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.div-int (frac var)
    (%cypher.fracmath.AshFrac.div-int frac var))

  (defun-inline %cypher.fracmath.AshFrac.eq (frac other)
    ;; Equality.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   other: a `AshFrac`.
    ;
    ; Returns:
    ;   A boolean.

    (@cypher.macros.and
      (=
        (%cypher.fracmath.AshFrac.get-numerator frac)
        (%cypher.fracmath.AshFrac.get-numerator other)
      )
      (=
        (%cypher.fracmath.AshFrac.get-denominator-ash frac)
        (%cypher.fracmath.AshFrac.get-denominator-ash other)
      )
    )
  )
  (defun cypher.fracmath.AshFrac.eq (frac other)
    (%cypher.fracmath.AshFrac.eq frac other))

  (defun-inline %cypher.fracmath.AshFrac.add (frac other)
    ;; Addition.
    ;
    ; The result retains a bit depth the same as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (+
        (%cypher.fracmath.AshFrac.get-numerator frac)
        (%cypher.fracmath.AshFrac.get-numerator
          (%cypher.fracmath.AshFrac.from-ash-frac
            other
            (%cypher.fracmath.AshFrac.get-denominator-ash frac)
          )
        )
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.add (frac other)
    (%cypher.fracmath.AshFrac.add frac other))

  (defun-inline %cypher.fracmath.AshFrac.add@precise (frac other)
    ;; Addition, retaining sufficient precision.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   other: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac` with a sufficiently precise `denominator_ash`.

    (if
      (>
        (%cypher.fracmath.AshFrac.get-denominator-ash frac)
        (%cypher.fracmath.AshFrac.get-denominator-ash other)
      )
      (%cypher.fracmath.AshFrac.add frac other)
      (%cypher.fracmath.AshFrac.add other frac)
    )
  )
  (defun cypher.fracmath.AshFrac.add@precise (frac other)
    (%cypher.fracmath.AshFrac.add@precise frac other))

  (defun-inline --%cypher.fracmath.AshFrac.mul (frac other)
    ;; Multiplication.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   other: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (ash
        (*
          (%cypher.fracmath.AshFrac.get-numerator frac)
          (%cypher.fracmath.AshFrac.get-numerator other)
        )
        (- 0 (%cypher.fracmath.AshFrac.get-denominator-ash other))
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defmacro %cypher.fracmath.AshFrac.mul fracs
    (if (r fracs)
      (qq
        (--%cypher.fracmath.AshFrac.mul
          (unquote (f fracs))
          (unquote (c %cypher.fracmath.AshFrac.mul (r fracs)))
        )
      )
      (f fracs)
    )
  )
  (defun --cypher.fracmath.AshFrac.mul (frac other)
    (--%cypher.fracmath.AshFrac.mul frac other))
  (defmacro cypher.fracmath.AshFrac.mul fracs
    (if (r fracs)
      (qq
        (--cypher.fracmath.AshFrac.mul
          (unquote (f fracs))
          (unquote (c cypher.fracmath.AshFrac.mul (r fracs)))
        )
      )
      (f fracs)
    )
  )

  (defun-inline %cypher.fracmath.AshFrac.mul@precise (frac other)
    ;; Multiplication, retaining sufficient precision.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   other: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac`.

    (%cypher.fracmath.AshFrac@unsafe
      (*
        (%cypher.fracmath.AshFrac.get-numerator frac)
        (%cypher.fracmath.AshFrac.get-numerator other)
      )
      (+
        (%cypher.fracmath.AshFrac.get-denominator-ash frac)
        (%cypher.fracmath.AshFrac.get-denominator-ash other)
      )
    )
  )
  (defun cypher.fracmath.AshFrac.mul@precise (frac other)
    (%cypher.fracmath.AshFrac.mul@precise frac other))

  (defun-inline %cypher.fracmath.AshFrac.div (frac other)
    ;; Division.
    ;
    ; The result retains a bit depth the same as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (%cypher.math.div
        (ash
          (%cypher.fracmath.AshFrac.get-numerator frac)
          (%cypher.fracmath.AshFrac.get-denominator-ash other)
        )
        (%cypher.fracmath.AshFrac.get-numerator other)
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.div (frac other)
    (%cypher.fracmath.AshFrac.div frac other))

  ;; Exports

  (defmacro %cf.Frac args (c %cypher.fracmath.Frac args))
  (defmacro cf.Frac args (c cypher.fracmath.Frac args))
  (defmacro %cf.Frac@unsafe args (c %cypher.fracmath.Frac@unsafe args))
  (defmacro cf.Frac@unsafe args (c cypher.fracmath.Frac@unsafe args))
  (defmacro %cf.Frac.get-numerator args (c %cypher.fracmath.Frac.get-numerator args))
  (defmacro cf.Frac.get-numerator args (c cypher.fracmath.Frac.get-numerator args))
  (defmacro %cf.Frac.get-denominator args (c %cypher.fracmath.Frac.get-denominator args))
  (defmacro cf.Frac.get-denominator args (c cypher.fracmath.Frac.get-denominator args))
  (defmacro %cf.Frac.from-frac args (c %cypher.fracmath.Frac.from-frac args))
  (defmacro cf.Frac.from-frac args (c cypher.fracmath.Frac.from-frac args))
  (defmacro %cf.Frac.from-ash-frac args (c %cypher.fracmath.Frac.from-ash-frac args))
  (defmacro cf.Frac.from-ash-frac args (c cypher.fracmath.Frac.from-ash-frac args))
  (defmacro %cf.Frac.gt-zero args (c %cypher.fracmath.Frac.gt-zero args))
  (defmacro cf.Frac.gt-zero args (c cypher.fracmath.Frac.gt-zero args))
  (defmacro %cf.Frac.gt-one args (c %cypher.fracmath.Frac.gt-one args))
  (defmacro cf.Frac.gt-one args (c cypher.fracmath.Frac.gt-one args))
  (defmacro %cf.Frac.abs args (c %cypher.fracmath.Frac.inv args))
  (defmacro cf.Frac.abs args (c cypher.fracmath.Frac.inv args))
  (defmacro %cf.Frac.inv args (c %cypher.fracmath.Frac.inv args))
  (defmacro cf.Frac.inv args (c cypher.fracmath.Frac.inv args))
  (defmacro %cf.Frac.eq args (c %cypher.fracmath.Frac.eq args))
  (defmacro cf.Frac.eq args (c cypher.fracmath.Frac.eq args))
  (defmacro %cf.Frac.gt-int args (c %cypher.fracmath.Frac.gt-int args))
  (defmacro cf.Frac.gt-int args (c cypher.fracmath.Frac.gt-int args))
  (defmacro %cf.Frac.gt args (c %cypher.fracmath.Frac.gt args))
  (defmacro cf.Frac.gt args (c cypher.fracmath.Frac.gt args))
  (defmacro %cf.Frac.mul args (c %cypher.fracmath.Frac.mul args))
  (defmacro cf.Frac.mul args (c cypher.fracmath.Frac.mul args))
  (defmacro %cf.Frac.mul@precise args (c %cypher.fracmath.Frac.mul@precise args))
  (defmacro cf.Frac.mul@precise args (c cypher.fracmath.Frac.mul@precise args))

  (defmacro %cf.AshFrac args (c %cypher.fracmath.AshFrac args))
  (defmacro cf.AshFrac args (c cypher.fracmath.AshFrac args))
  (defmacro %cf.AshFrac@unsafe args (c %cypher.fracmath.AshFrac@unsafe args))
  (defmacro cf.AshFrac@unsafe args (c cypher.fracmath.AshFrac@unsafe args))
  (defmacro %cf.AshFrac.from-frac args (c %cypher.fracmath.AshFrac.from-frac args))
  (defmacro cf.AshFrac.from-frac args (c cypher.fracmath.AshFrac.from-frac args))
  (defmacro %cf.AshFrac.from-ash-frac args (c %cypher.fracmath.AshFrac.from-ash-frac args))
  (defmacro cf.AshFrac.from-ash-frac args (c cypher.fracmath.AshFrac.from-ash-frac args))
  (defmacro %cf.AshFrac.to-int args (c %cypher.fracmath.AshFrac.to-int args))
  (defmacro cf.AshFrac.to-int args (c cypher.fracmath.AshFrac.to-int args))
  (defmacro %cf.AshFrac.get-numerator args (c %cypher.fracmath.AshFrac.get-numerator args))
  (defmacro cf.AshFrac.get-numerator args (c cypher.fracmath.AshFrac.get-numerator args))
  (defmacro %cf.AshFrac.get-denominator-ash args (c %cypher.fracmath.AshFrac.get-denominator-ash args))
  (defmacro cf.AshFrac.get-denominator-ash args (c cypher.fracmath.AshFrac.get-denominator-ash args))
  (defmacro %cf.AshFrac.str args (c %cypher.fracmath.AshFrac.str args))
  (defmacro cf.AshFrac.str args (c cypher.fracmath.AshFrac.str args))
  (defmacro %cf.AshFrac.gt-one args (c %cypher.fracmath.AshFrac.gt-one args))
  (defmacro cf.AshFrac.gt-one args (c cypher.fracmath.AshFrac.gt-one args))
  (defmacro %cf.AshFrac.neg args (c %cypher.fracmath.AshFrac.neg args))
  (defmacro cf.AshFrac.neg args (c cypher.fracmath.AshFrac.neg args))
  (defmacro %cf.AshFrac.abs args (c %cypher.fracmath.AshFrac.abs args))
  (defmacro cf.AshFrac.abs args (c cypher.fracmath.AshFrac.abs args))
  (defmacro %cf.AshFrac.inv args (c %cypher.fracmath.AshFrac.inv args))
  (defmacro cf.AshFrac.inv args (c cypher.fracmath.AshFrac.inv args))
  (defmacro %cf.AshFrac.square args (c %cypher.fracmath.AshFrac.square args))
  (defmacro cf.AshFrac.square args (c cypher.fracmath.AshFrac.square args))
  (defmacro %cf.AshFrac.square@precise args (c %cypher.fracmath.AshFrac.square@precise args))
  (defmacro cf.AshFrac.square@precise args (c cypher.fracmath.AshFrac.square@precise args))
  (defmacro %cf.AshFrac.sqrt args (c %cypher.fracmath.AshFrac.sqrt args))
  (defmacro cf.AshFrac.sqrt args (c cypher.fracmath.AshFrac.sqrt args))
  (defmacro %cf.AshFrac.gt-int args (c %cypher.fracmath.AshFrac.gt-int args))
  (defmacro cf.AshFrac.gt-int args (c cypher.fracmath.AshFrac.gt-int args))
  (defmacro %cf.AshFrac.add-int args (c %cypher.fracmath.AshFrac.add-int args))
  (defmacro cf.AshFrac.add-int args (c cypher.fracmath.AshFrac.add-int args))
  (defmacro %cf.AshFrac.sub-int args (c %cypher.fracmath.AshFrac.sub-int args))
  (defmacro cf.AshFrac.sub-int args (c cypher.fracmath.AshFrac.sub-int args))
  (defmacro %cf.AshFrac.mul-int args (c %cypher.fracmath.AshFrac.mul-int args))
  (defmacro cf.AshFrac.mul-int args (c cypher.fracmath.AshFrac.mul-int args))
  (defmacro %cf.AshFrac.div-int args (c %cypher.fracmath.AshFrac.div-int args))
  (defmacro cf.AshFrac.div-int args (c cypher.fracmath.AshFrac.div-int args))
  (defmacro %cf.AshFrac.eq args (c %cypher.fracmath.AshFrac.eq args))
  (defmacro cf.AshFrac.eq args (c cypher.fracmath.AshFrac.eq args))
  (defmacro %cf.AshFrac.add args (c %cypher.fracmath.AshFrac.add args))
  (defmacro cf.AshFrac.add args (c cypher.fracmath.AshFrac.add args))
  (defmacro %cf.AshFrac.add@precise args (c %cypher.fracmath.AshFrac.add@precise args))
  (defmacro cf.AshFrac.add@precise args (c cypher.fracmath.AshFrac.add@precise args))
  (defmacro %cf.AshFrac.mul args (c %cypher.fracmath.AshFrac.mul args))
  (defmacro cf.AshFrac.mul args (c cypher.fracmath.AshFrac.mul args))
  (defmacro %cf.AshFrac.div args (c %cypher.fracmath.AshFrac.div args))
  (defmacro cf.AshFrac.div args (c cypher.fracmath.AshFrac.div args))
)
