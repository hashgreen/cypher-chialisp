(
  ;; Fractions.

  (defun-inline %cypher.fracmath.Frac (numer denom)
    ;; Fraction representation.
    ;
    ; This structure is essentially (numer / denom) in value.
    ; We assert the denominator to be greater than zero to avoid surprises in some
    ; comparisons.

    (@cypher.macros.assert
      (> denom 0)
      (c numer denom)
    )
  )
  (defun cypher.fracmath.Frac (numer denom)
    (%cypher.fracmath.Frac numer denom))

  (defun-inline %cypher.fracmath.Frac@unsafe (numer denom)
    ;; Fraction representation, does not check demoninator.

    (c numer denom)
  )
  (defun cypher.fracmath.Frac@unsafe (numer denom)
    (%cypher.fracmath.Frac@unsafe numer denom))

  ;; Factory functions.

  (defun-inline %cypher.fracmath.Frac.from-frac (frac denom)
    ;; Convert from a normal fraction.

    (%cypher.fracmath.Frac
      (%cypher.math.div
        (*
          (%cypher.fracmath.Frac.get-numerator frac)
          denom
        )
        (%cypher.fracmath.Frac.get-denominator frac)
      )
      denom
    )
  )
  (defun cypher.fracmath.Frac.from-frac (frac denom)
    (%cypher.fracmath.Frac.from-frac frac denom))

  (defun-inline %cypher.fracmath.Frac.from-ash-frac (ash_frac denom)
    ;; Convert from an ash fraction.

    (%cypher.fracmath.Frac
      (ash
        (*
          (%cypher.fracmath.AshFrac.get-numerator ash_frac)
          denom
        )
        (- 0 (%cypher.fracmath.AshFrac.get-denominator-ash ash_frac))
      )
      denom
    )
  )
  (defun cypher.fracmath.Frac.from-ash-frac (ash_frac denom)
    (cypher.fracmath.Frac.from-ash-frac ash_frac denom))

  ;; Getter functions.

  (defun-inline %cypher.fracmath.Frac.get-numerator (frac)
    (f frac))
  (defun cypher.fracmath.Frac.get-numerator (frac)
    (%cypher.fracmath.Frac.get-numerator frac))

  (defun-inline %cypher.fracmath.Frac.get-denominator (frac)
    (r frac))
  (defun cypher.fracmath.Frac.get-denominator (frac)
    (%cypher.fracmath.Frac.get-denominator frac))

  ;; Unary arithmetic functions.

  (defun-inline %cypher.fracmath.Frac.gt-zero (frac)
    ;; `Greater than` against zero.

    (>
      (%cypher.fracmath.Frac.get-numerator frac)
      0
    )
  )
  (defun cypher.fracmath.Frac.gt-zero (frac)
    (%cypher.fracmath.Frac.gt-zero frac))

  (defun-inline %cypher.fracmath.Frac.gt-one (frac)
    ;; `Greater than` against one.

    (>
      (%cypher.fracmath.Frac.get-numerator frac)
      (%cypher.fracmath.Frac.get-denominator frac)
    )
  )
  (defun cypher.fracmath.Frac.gt-one (frac var)
    (%cypher.fracmath.Frac.gt-one frac var))

  (defun-inline %cypher.fracmath.Frac.abs (frac)
    ;; Absolute value.

    (%cypher.fracmath.Frac@unsafe
      (%cypher.math.abs (%cypher.fracmath.Frac.get-denominator frac))
      (%cypher.fracmath.Frac.get-numerator frac)
    )
  )
  (defun cypher.fracmath.Frac.abs (frac)
    (%cypher.fracmath.Frac.abs frac))

  (defun-inline %cypher.fracmath.Frac.inv (frac)
    ;; Numerical inversion.
    ;
    ; Note this inversion produces a fraction of the same denominator.

    (%cypher.fracmath.Frac@unsafe
      (%cypher.math.div
        (*
          (%cypher.fracmath.Frac.get-denominator frac)
          (%cypher.fracmath.Frac.get-denominator frac))
        (%cypher.fracmath.Frac.get-numerator frac)
      )
      (%cypher.fracmath.Frac.get-denominator frac)
    )
  )
  (defun cypher.fracmath.Frac.inv (frac)
    (%cypher.fracmath.Frac.inv frac))

  ;; Binary arithmetic functions.

  (defun-inline %cypher.fracmath.Frac.eq (frac other)
    ;; `Equal to` against another `Frac`.

    (@cypher.macros.and
      (=
        (%cypher.fracmath.Frac.get-numerator frac)
        (%cypher.fracmath.Frac.get-numerator other)
      )
      (=
        (%cypher.fracmath.Frac.get-denominator frac)
        (%cypher.fracmath.Frac.get-denominator other)
      )
    )
  )
  (defun cypher.fracmath.Frac.eq (frac other)
    (%cypher.fracmath.Frac.eq frac other))

  (defun-inline %cypher.fracmath.Frac.gt-int (frac var)
    ;; `Greater than` against an integer.

    (>
      (%cypher.fracmath.Frac.get-numerator frac)
      (* var (%cypher.fracmath.Frac.get-denominator frac))
    )
  )
  (defun cypher.fracmath.Frac.gt-int (frac var)
    (%cypher.fracmath.Frac.gt-int frac var))

  (defun-inline %cypher.fracmath.Frac.gt (frac other)
    ;; `Greater than` against an `Frac`.

    (>
      (*
        (%cypher.fracmath.Frac.get-numerator frac)
        (%cypher.fracmath.Frac.get-denominator other)
      )
      (*
        (%cypher.fracmath.Frac.get-numerator other)
        (%cypher.fracmath.Frac.get-denominator frac)
      )
    )
  )
  (defun cypher.fracmath.Frac.gt (frac other)
    (%cypher.fracmath.Frac.gt frac other))

  (defun-inline %cypher.fracmath.Frac.mul (frac other)
    ;; `Multiplication` with another `Frac`.

    (%cypher.fracmath.Frac@unsafe
      (*
        (%cypher.fracmath.Frac.get-numerator frac)
        (%cypher.fracmath.Frac.get-numerator other)
      )
      (*
        (%cypher.fracmath.Frac.get-denominator frac)
        (%cypher.fracmath.Frac.get-denominator other)
      )
    )
  )
  (defun cypher.fracmath.Frac.mul (frac other)
    (%cypher.fracmath.Frac.mul frac other))

  ;; Fractions with arithmetic bit-shifting ("ash fractions").

  (defun-inline %cypher.fracmath.AshFrac (numer denom_ash)
    ;; Bit-shifted fraction representation.
    ;
    ; This represent (numer / 2^denom_ash) in value.

    (@cypher.macros.assert
      (> denom_ash 0)
      (c numer denom_ash)
    )
  )
  (defun cypher.fracmath.AshFrac (numer denom_ash)
    (%cypher.fracmath.AshFrac numer denom_ash))

  (defun-inline %cypher.fracmath.AshFrac@unsafe (numer denom_ash)
    ;; Bit-shifted fraction representation, does not check demoninator.
    ;
    ; This represent (numer / 2^denom_ash) in value.

    (c numer denom_ash)
  )
  (defun cypher.fracmath.AshFrac@unsafe (numer denom_ash)
    (%cypher.fracmath.AshFrac@unsafe numer denom_ash))

  ;; Factory functions.

  (defun-inline %cypher.fracmath.AshFrac.from-frac (frac denom_ash)
    ;; Convert from a normal fraction.

    (%cypher.fracmath.AshFrac
      (%cypher.math.div
        (ash
          (%cypher.fracmath.Frac.get-numerator frac)
          denom_ash
        )
        (%cypher.fracmath.Frac.get-denominator frac)
      )
      denom_ash
    )
  )
  (defun cypher.fracmath.AshFrac.from-frac (frac denom_ash)
    (%cypher.fracmath.AshFrac.from-frac frac denom_ash))

  (defun-inline %cypher.fracmath.AshFrac.from-ash-frac (ash_frac denom_ash)
    ;; Convert from another ash fraction.

    (%cypher.fracmath.AshFrac
      (ash
        (%cypher.fracmath.AshFrac.get-numerator ash_frac)
        (- denom_ash (%cypher.fracmath.AshFrac.get-denominator-ash ash_frac))
      )
      denom_ash
    )
  )
  (defun cypher.fracmath.AshFrac.from-ash-frac (ash_frac denom_ash)
    (%cypher.fracmath.AshFrac.from-ash-frac ash_frac denom_ash))

  ;; Getter functions.

  (defun-inline %cypher.fracmath.AshFrac.get-numerator (ash_frac)
    (f ash_frac))
  (defun cypher.fracmath.AshFrac.get-numerator (ash_frac)
    (%cypher.fracmath.AshFrac.get-numerator ash_frac))

  (defun-inline %cypher.fracmath.AshFrac.get-denominator-ash (ash_frac)
    (r ash_frac))
  (defun cypher.fracmath.AshFrac.get-denominator-ash (ash_frac)
    (%cypher.fracmath.AshFrac.get-denominator-ash ash_frac))

  ;; Unary arithmetic functions.

  (defun-inline %cypher.fracmath.AshFrac.gt-one (frac)
    ;; `Greater than` against one.

    (%cypher.fracmath.AshFrac.gt-int frac 1)
  )
  (defun cypher.fracmath.AshFrac.gt-one (frac var)
    (%cypher.fracmath.AshFrac.gt-one frac var))

  (defun-inline %cypher.fracmath.AshFrac.abs (frac)
    ;; Absolute value.

    (%cypher.fracmath.AshFrac@unsafe
      (%cypher.math.abs (%cypher.fracmath.AshFrac.get-denominator frac))
      (%cypher.fracmath.AshFrac.get-numerator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.abs (frac)
    (%cypher.fracmath.AshFrac.abs frac))

  (defun-inline %cypher.fracmath.AshFrac.inv (frac)
    ;; Inversion.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (%cypher.math.div
        (ash
          1
          (* 2 (%cypher.fracmath.AshFrac.get-denominator-ash frac)))
        (%cypher.fracmath.AshFrac.get-numerator frac)
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.inv (frac)
    (%cypher.fracmath.AshFrac.inv frac))

  (defun-inline %cypher.fracmath.AshFrac.square (frac)
    ;; Squaring.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (ash
        (*
          (%cypher.fracmath.AshFrac.get-numerator frac)
          (%cypher.fracmath.AshFrac.get-numerator frac)
        )
        (- 0 (%cypher.fracmath.AshFrac.get-denominator-ash frac))
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.square (frac)
    (%cypher.fracmath.AshFrac.square frac))

  (defun-inline %cypher.fracmath.AshFrac.square@precise (frac)
    ;; Squaring, retaining sufficient precision.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac` with a sufficiently precise `denominator_ash`.

    (%cypher.fracmath.AshFrac@unsafe
      (*
        (%cypher.fracmath.AshFrac.get-numerator frac)
        (%cypher.fracmath.AshFrac.get-numerator frac)
      )
      (ash (%cypher.fracmath.AshFrac.get-denominator-ash frac) 1)
    )
  )
  (defun cypher.fracmath.AshFrac.square@precise (frac)
    (%cypher.fracmath.AshFrac.square@precise frac))

  (defun-inline %cypher.fracmath.AshFrac.sqrt (ash_frac)
    ;; Square root.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (%cypher.math.sqrt
        (ash
          (%cypher.fracmath.AshFrac.get-numerator ash_frac)
          (%cypher.fracmath.AshFrac.get-denominator-ash ash_frac)
        )
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash ash_frac)
    )
  )
  (defun cypher.fracmath.AshFrac.sqrt (ash_frac)
    (%cypher.fracmath.AshFrac.sqrt ash_frac))

  ;; Binary arithmetic functions.

  (defun-inline %cypher.fracmath.AshFrac.gt-int (frac var)
    ;; Greater than an integer.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   var: an integer.
    ;
    ; Returns:
    ;   A boolean.

    (>
      (%cypher.fracmath.AshFrac.get-numerator frac)
      (ash var (%cypher.fracmath.AshFrac.get-denominator-ash frac))
    )
  )
  (defun cypher.fracmath.AshFrac.gt-int (frac var)
    (%cypher.fracmath.AshFrac.gt-int frac var))

  (defun-inline %cypher.fracmath.AshFrac.add-int (frac var)
    ;; Adding an integer.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   var: an integer.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (+
        (%cypher.fracmath.AshFrac.get-numerator frac)
        (ash 1 (%cypher.fracmath.AshFrac.get-denominator-ash frac))
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.add-int (frac var)
    (%cypher.fracmath.AshFrac.add-int frac var))

  (defun-inline %cypher.fracmath.AshFrac.sub-int (frac var)
    ;; Subtracting an integer.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   var: an integer.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (-
        (%cypher.fracmath.AshFrac.get-numerator frac)
        (ash 1 (%cypher.fracmath.AshFrac.get-denominator-ash frac))
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.sub-int (frac var)
    (%cypher.fracmath.AshFrac.sub-int frac var))

  (defun-inline %cypher.fracmath.AshFrac.div-int (frac var)
    ;; Dividing an integer.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   var: an integer.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (%cypher.math.div
        (%cypher.fracmath.AshFrac.get-numerator frac)
        var
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.div-int (frac var)
    (%cypher.fracmath.AshFrac.div-int frac var))

  (defun-inline %cypher.fracmath.AshFrac.eq (frac other)
    ;; Equality.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   other: a `AshFrac`.
    ;
    ; Returns:
    ;   A boolean.

    (@cypher.macros.and
      (=
        (%cypher.fracmath.AshFrac.get-numerator frac)
        (%cypher.fracmath.AshFrac.get-numerator other)
      )
      (=
        (%cypher.fracmath.AshFrac.get-denominator-ash frac)
        (%cypher.fracmath.AshFrac.get-denominator-ash other)
      )
    )
  )
  (defun cypher.fracmath.AshFrac.eq (frac other)
    (%cypher.fracmath.AshFrac.eq frac other))

  (defun-inline %cypher.fracmath.AshFrac.mul (frac other)
    ;; Multiplication.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   other: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac` with the same `denominator_ash` as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (ash
        (*
          (%cypher.fracmath.AshFrac.get-numerator frac)
          (%cypher.fracmath.AshFrac.get-numerator other)
        )
        (- 0 (%cypher.fracmath.AshFrac.get-denominator-ash other))
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.mul (frac other)
    (%cypher.fracmath.AshFrac.mul frac other))

  (defun-inline %cypher.fracmath.AshFrac.mul@precise (frac other)
    ;; Multiplication, retaining sufficient precision.
    ;
    ; Args:
    ;   frac: a `AshFrac`.
    ;   other: a `AshFrac`.
    ;
    ; Returns:
    ;   A `AshFrac`.

    (%cypher.fracmath.AshFrac@unsafe
      (*
        (%cypher.fracmath.AshFrac.get-numerator frac)
        (%cypher.fracmath.AshFrac.get-numerator other)
      )
      (+
        (%cypher.fracmath.AshFrac.get-denominator-ash frac)
        (%cypher.fracmath.AshFrac.get-denominator-ash other)
      )
    )
  )
  (defun cypher.fracmath.AshFrac.mul@precise (frac other)
    (%cypher.fracmath.AshFrac.mul@precise frac other))

  (defun-inline %cypher.fracmath.AshFrac.div (frac other)
    ;; Division.
    ;
    ; The result retains a bit depth the same as `frac`.

    (%cypher.fracmath.AshFrac@unsafe
      (%cypher.math.div
        (ash
          (%cypher.fracmath.AshFrac.get-numerator frac)
          (%cypher.fracmath.AshFrac.get-denominator-ash other)
        )
        (%cypher.fracmath.AshFrac.get-numerator other)
      )
      (%cypher.fracmath.AshFrac.get-denominator-ash frac)
    )
  )
  (defun cypher.fracmath.AshFrac.div (frac other)
    (%cypher.fracmath.AshFrac.div frac other))

  ;; Exports

  (defun-inline %cf.Frac (f . r) (%cypher.fracmath.Frac f . r))
  (defun-inline cf.Frac (f . r) (cypher.fracmath.Frac f . r))
  (defun-inline %cf.Frac@unsafe (f . r) (%cypher.fracmath.Frac@unsafe f . r))
  (defun-inline cf.Frac@unsafe (f . r) (cypher.fracmath.Frac@unsafe f . r))
  (defun-inline %cf.Frac.get-numerator (f . r) (%cypher.fracmath.Frac.get-numerator f . r))
  (defun-inline cf.Frac.get-numerator (f . r) (cypher.fracmath.Frac.get-numerator f . r))
  (defun-inline %cf.Frac.get-denominator (f . r) (%cypher.fracmath.Frac.get-denominator f . r))
  (defun-inline cf.Frac.get-denominator (f . r) (cypher.fracmath.Frac.get-denominator f . r))
  (defun-inline %cf.Frac.from-frac (f . r) (%cypher.fracmath.Frac.from-frac f . r))
  (defun-inline cf.Frac.from-frac (f . r) (cypher.fracmath.Frac.from-frac f . r))
  (defun-inline %cf.Frac.from-ash-frac (f . r) (%cypher.fracmath.Frac.from-ash-frac f . r))
  (defun-inline cf.Frac.from-ash-frac (f . r) (cypher.fracmath.Frac.from-ash-frac f . r))
  (defun-inline %cf.Frac.gt-zero (f . r) (%cypher.fracmath.Frac.gt-zero f . r))
  (defun-inline cf.Frac.gt-zero (f . r) (cypher.fracmath.Frac.gt-zero f . r))
  (defun-inline %cf.Frac.gt-one (f . r) (%cypher.fracmath.Frac.gt-one f . r))
  (defun-inline cf.Frac.gt-one (f . r) (cypher.fracmath.Frac.gt-one f . r))
  (defun-inline %cf.Frac.abs (f . r) (%cypher.fracmath.Frac.inv f . r))
  (defun-inline cf.Frac.abs (f . r) (cypher.fracmath.Frac.inv f . r))
  (defun-inline %cf.Frac.inv (f . r) (%cypher.fracmath.Frac.inv f . r))
  (defun-inline cf.Frac.inv (f . r) (cypher.fracmath.Frac.inv f . r))
  (defun-inline %cf.Frac.eq (f . r) (%cypher.fracmath.Frac.eq f . r))
  (defun-inline cf.Frac.eq (f . r) (cypher.fracmath.Frac.eq f . r))
  (defun-inline %cf.Frac.gt-int (f . r) (%cypher.fracmath.Frac.gt-int f . r))
  (defun-inline cf.Frac.gt-int (f . r) (cypher.fracmath.Frac.gt-int f . r))
  (defun-inline %cf.Frac.gt (f . r) (%cypher.fracmath.Frac.gt f . r))
  (defun-inline cf.Frac.gt (f . r) (cypher.fracmath.Frac.gt f . r))
  (defun-inline %cf.Frac.mul (f . r) (%cypher.fracmath.Frac.mul f . r))
  (defun-inline cf.Frac.mul (f . r) (cypher.fracmath.Frac.mul f . r))

  (defun-inline %cf.AshFrac (f . r) (%cypher.fracmath.AshFrac f . r))
  (defun-inline cf.AshFrac (f . r) (cypher.fracmath.AshFrac f . r))
  (defun-inline %cf.AshFrac@unsafe (f . r) (%cypher.fracmath.AshFrac@unsafe f . r))
  (defun-inline cf.AshFrac@unsafe (f . r) (cypher.fracmath.AshFrac@unsafe f . r))
  (defun-inline %cf.AshFrac.get-numerator (f . r) (%cypher.fracmath.AshFrac.get-numerator f . r))
  (defun-inline cf.AshFrac.get-numerator (f . r) (cypher.fracmath.AshFrac.get-numerator f . r))
  (defun-inline %cf.AshFrac.get-denominator-ash (f . r) (%cypher.fracmath.AshFrac.get-denominator-ash f . r))
  (defun-inline cf.AshFrac.get-denominator-ash (f . r) (cypher.fracmath.AshFrac.get-denominator-ash f . r))
  (defun-inline %cf.AshFrac.from-frac (f . r) (%cypher.fracmath.AshFrac.from-frac f . r))
  (defun-inline cf.AshFrac.from-frac (f . r) (cypher.fracmath.AshFrac.from-frac f . r))
  (defun-inline %cf.AshFrac.from-ash-frac (f . r) (%cypher.fracmath.AshFrac.from-ash-frac f . r))
  (defun-inline cf.AshFrac.from-ash-frac (f . r) (cypher.fracmath.AshFrac.from-ash-frac f . r))
  (defun-inline %cf.AshFrac.gt-one (f . r) (%cypher.fracmath.AshFrac.gt-one f . r))
  (defun-inline cf.AshFrac.gt-one (f . r) (cypher.fracmath.AshFrac.gt-one f . r))
  (defun-inline %cf.AshFrac.abs (f . r) (%cypher.fracmath.AshFrac.inv f . r))
  (defun-inline cf.AshFrac.abs (f . r) (cypher.fracmath.AshFrac.inv f . r))
  (defun-inline %cf.AshFrac.inv (f . r) (%cypher.fracmath.AshFrac.inv f . r))
  (defun-inline cf.AshFrac.inv (f . r) (cypher.fracmath.AshFrac.inv f . r))
  (defun-inline %cf.AshFrac.square (f . r) (%cypher.fracmath.AshFrac.square f . r))
  (defun-inline cf.AshFrac.square (f . r) (cypher.fracmath.AshFrac.square f . r))
  (defun-inline %cf.AshFrac.square@precise (f . r) (%cypher.fracmath.AshFrac.square@precise f . r))
  (defun-inline cf.AshFrac.square@precise (f . r) (cypher.fracmath.AshFrac.square@precise f . r))
  (defun-inline %cf.AshFrac.sqrt (f . r) (%cypher.fracmath.AshFrac.sqrt f . r))
  (defun-inline cf.AshFrac.sqrt (f . r) (cypher.fracmath.AshFrac.sqrt f . r))
  (defun-inline %cf.AshFrac.gt-int (f . r) (%cypher.fracmath.AshFrac.gt-int f . r))
  (defun-inline cf.AshFrac.gt-int (f . r) (cypher.fracmath.AshFrac.gt-int f . r))
  (defun-inline %cf.AshFrac.add-int (f . r) (%cypher.fracmath.AshFrac.add-int f . r))
  (defun-inline cf.AshFrac.add-int (f . r) (cypher.fracmath.AshFrac.add-int f . r))
  (defun-inline %cf.AshFrac.sub-int (f . r) (%cypher.fracmath.AshFrac.sub-int f . r))
  (defun-inline cf.AshFrac.sub-int (f . r) (cypher.fracmath.AshFrac.sub-int f . r))
  (defun-inline %cf.AshFrac.div-int (f . r) (%cypher.fracmath.AshFrac.div-int f . r))
  (defun-inline cf.AshFrac.div-int (f . r) (cypher.fracmath.AshFrac.div-int f . r))
  (defun-inline %cf.AshFrac.eq (f . r) (%cypher.fracmath.AshFrac.eq f . r))
  (defun-inline cf.AshFrac.eq (f . r) (cypher.fracmath.AshFrac.eq f . r))
  (defun-inline %cf.AshFrac.mul (f . r) (%cypher.fracmath.AshFrac.mul f . r))
  (defun-inline cf.AshFrac.mul (f . r) (cypher.fracmath.AshFrac.mul f . r))
  (defun-inline %cf.AshFrac.div (f . r) (%cypher.fracmath.AshFrac.div f . r))
  (defun-inline cf.AshFrac.div (f . r) (cypher.fracmath.AshFrac.div f . r))
)
