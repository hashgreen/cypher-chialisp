(
  (defmacro @cypher.tests.assert-fails (statement)
    ;; Expect the statement to fail.

    (qq (if
      (= (f (mod () (unquote statement))) (q . x))
      1
      (x
        (q . (unquote statement))
        "should fail!"
      )
    ))
  )

  (defun --cypher.tests.sha256tree (tree)
    (if (l tree)
      (sha256 2
        (--cypher.tests.sha256tree (f tree))
        (--cypher.tests.sha256tree (r tree))
      )
      (sha256 1 tree)
    )
  )

  (defmacro @cypher.tests.assert-equal (statement result)
    ;; Expect the statement to evaluate to result.

    (qq (if
      (=
        (--cypher.tests.sha256tree (unquote statement))
        (--cypher.tests.sha256tree (unquote result))
      )
      1
      (x
        (q . (unquote statement))
        "does not evaluate to"
        (q . (unquote result))
      )
    ))
  )

  (defmacro @cypher.tests.assert-approx (statement result epsilon)
    ;; Expect the statement to evaluate approximately to result.

    (qq (if
      (all
        (>
          (unquote epsilon)
          (- (unquote statement) (unquote result))
        )
        (>
          (unquote epsilon)
          (- (unquote result) (unquote statement))
        )
      )
      1
      (x
        (q . (unquote statement))
        "does not evaluate approximately to"
        (q . (unquote result))
      )
    ))
  )

  (defmacro @cypher.tests.assert args
    ;; Assert a series of statements, followed by test name.
    ;
    ; Usage: (assert cond1 cond2 ... name)

    (if (r args)
      (qq (if (unquote (f args))
        (unquote (c @cypher.tests.assert (r args)))
        (x
          (q . (unquote (f args)))
          "evalutes to false."
        )
      ))
      (qq (concat (unquote (f args)) " passed"))
    )
  )

  (defmacro @assert-fails args (c @cypher.tests.assert-fails args))
  (defmacro @assert-equal args (c @cypher.tests.assert-equal args))
  (defmacro @assert-approx args (c @cypher.tests.assert-approx args))
  (defmacro @assert args (c @cypher.tests.assert args))
)
