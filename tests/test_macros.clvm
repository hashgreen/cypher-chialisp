(a (mod ()

  (include cypher/macros.clvm)

  (include tests/utils.clvm)

  (defun test-assert ()
    (tests.utils.assert
      (tests.utils.expect-equal (cypher.macros.assert 1 1 "successful") "successful")
      (tests.utils.expect-failed (cypher.macros.assert 1 1 0 "failed"))
      "test_macros.test-assert"))

  (defun test-and ()
    (tests.utils.assert
      (tests.utils.expect-equal (cypher.macros.and 0 0) 0)
      (tests.utils.expect-equal (cypher.macros.and 0 1) 0)
      (tests.utils.expect-equal (cypher.macros.and 1 1 1) 1)
      "test_macros.test-and"))

  (defun test-ii ()
    (tests.utils.assert
      (tests.utils.expect-equal
        (cypher.macros.ii 1 "hashgreen" "hashbrown")
        "hashgreen")
      (tests.utils.expect-equal
        (cypher.macros.ii 0 "hashgreen" 1 "hashbrown" "hashred")
        "hashbrown")
      (tests.utils.expect-equal
        (cypher.macros.ii 0 "hashgreen" 0 "hashbrown" "hashred")
        "hashred")
      "test_macros.test-ii"))

  (defun test-switch ()
    (tests.utils.assert
      (tests.utils.expect-equal
        (cypher.macros.switch (1 . "hashgreen") "hashbrown")
        "hashgreen")
      (tests.utils.expect-equal
        (cypher.macros.switch (0 . "hashgreen") (1 . "hashbrown") "hashred")
        "hashbrown")
      (tests.utils.expect-equal
        (cypher.macros.switch (0 . "hashgreen") (0 . "hashbrown") "hashred")
        "hashred")
      "test_macros.test-switch"))

  (defun test_macros ()
    (tests.utils.assert
      (test-assert)
      (test-and)
      (test-ii)
      (test-switch)
      "test_macros"))

  (test_macros)

) ())
