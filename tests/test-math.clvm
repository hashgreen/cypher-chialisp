(a (mod ()

  (include cypher/macros.clvm)
  (include cypher/math.clvm)

  (include tests/utils.clvm)

  (defun-inline test-unsigned-sub ()
    (@assert
      (@assert-equal (%cf.unsigned-sub 2 2) 0)
      (@assert-fails (%cf.unsigned-sub 1 2))
      "test-math.test-unsigned-sub"))

  (defun-inline test-round ()
    (@assert
      (@assert-equal (%cf.round-up-to-odd 0) 1)
      (@assert-equal (%cf.round-up-to-odd 1) 1)
      (@assert-equal (%cf.round-up-to-odd 2) 3)
      (@assert-equal (%cf.round-up-to-odd 3) 3)
      (@assert-equal (%cf.round-up-to-even 0) 0)
      (@assert-equal (%cf.round-up-to-even 1) 2)
      (@assert-equal (%cf.round-up-to-even 2) 2)
      (@assert-equal (%cf.round-up-to-even 3) 4)
      (@assert-equal (%cf.round-down-to-odd 0) -1)
      (@assert-equal (%cf.round-down-to-odd 1) 1)
      (@assert-equal (%cf.round-down-to-odd 2) 1)
      (@assert-equal (%cf.round-down-to-odd 3) 3)
      (@assert-equal (%cf.round-down-to-even 0) 0)
      (@assert-equal (%cf.round-down-to-even 1) 0)
      (@assert-equal (%cf.round-down-to-even 2) 2)
      (@assert-equal (%cf.round-down-to-even 3) 2)
      "test-math.test-round"))

  (defun-inline test-div ()
    (@assert
      (@assert-equal (%cf.div 2 2) 1)
      (@assert-equal (%cf.div 2 3) 0)
      (@assert-equal (%cf.div -3 2) -2)
      (@assert-equal (%cf.div 3 2) 1)
      "test-math.test-div"))

  (defun-inline test-sqrt ()
    (@assert
      (@assert-equal (cf.sqrt 0) 0)
      (@assert-equal (cf.sqrt 1) 1)
      (@assert-equal (cf.sqrt 2) 1)
      (@assert-equal (cf.sqrt 3) 1)
      (@assert-equal (cf.sqrt 4) 2)
      (@assert-equal (cf.sqrt 8) 2)
      (@assert-equal (cf.sqrt 100) 10)
      (@assert-equal (cf.sqrt 420) 20)
      (@assert-equal (cf.sqrt 10000) 100)
      (@assert-equal (cf.sqrt 1000000000000) 1000000)
      "test-math.test-sqrt"))

  (defun-inline test-math ()
    (@assert
      (test-unsigned-sub)
      (test-round)
      (test-div)
      (test-sqrt)
      "test-math"))

  (test-math)

) ())
