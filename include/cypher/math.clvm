(
  (defun-inline cypher.math.unsigned-sub (minuend subtrahend)
    (if (> subtrahend minuend)
      (x)
      (- minuend subtrahend)
    )
  )

  (defun-inline cypher.math.div (numerator denominator)
    ; The vanilla `/` operator has some unintended behavior, so we fall back to
    ; `divmod` operator.

    (f (divmod numerator denominator))
  )

  (defun-inline cypher.math.mulfrac (var numerator denominator)
    ;; Multiply var by the fraction (numerator / denominator)
    (cypher.math.div (* var numerator) denominator)
  )

  (defun cypher.math.sqrt_newton_loop (var var1 var2)
    (if (> var1 var2)
      (cypher.math.sqrt_newton_loop
        var
        var2
        (cypher.math.div (+ (cypher.math.div var var2) var2) 2)
      )
      var1  ; end of recursion
    )
  )

  (defun cypher.math.sqrt (var)
    (cf.SWITCH
      (> var 3)  ; var > 3
      (cypher.math.sqrt_newton_loop
        var
        var
        (+ (cypher.math.div var 2) 1)
      )
      (> var 0)  ; 3 > var > 0
      1
      (= var 0)  ; var == 0
      0
      (x)
    )
  )

  ;; Exports

  (defun-inline cf.unsigned-sub (f . r) (cypher.math.unsigned-sub f . r))
  (defun-inline cf.div (f . r) (cypher.math.div f . r))
  (defun-inline cf.mulfrac (f . r) (cypher.math.mulfrac f . r))
  (defun-inline cf.sqrt (f . r) (cypher.math.sqrt f . r))
)
